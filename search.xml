<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端跨域携带Cookie</title>
      <link href="/posts/87b619b6.html"/>
      <url>/posts/87b619b6.html</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>想必并不是前后端一定处于一个同域的状态，可能有以下情况：</p><ul><li>前后端分离</li><li>域名不同</li></ul><p>这样就容易遇见一个这样的问题，后端想基于Session来存储和使用数据，可这个时候就根本拿不到SessionID。<br>就像我刚刚那样，明明后端已经配好了CORS，前端还是有问题。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端是5173端口</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 允许跨域请求时携带 Cookie</span></span><br><span class="line">    config.<span class="property">withCredentials</span>=<span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;lnpbqc.allowCORS&#125;&quot;)</span></span><br><span class="line">String allowCORS;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/**&quot;</span>)  <span class="comment">// 允许跨域的路径</span></span><br><span class="line">            .allowedOrigins(allowCORS)  <span class="comment">// 允许的域名</span></span><br><span class="line">            .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)  <span class="comment">// 允许的方法</span></span><br><span class="line">            .allowedHeaders(<span class="string">&quot;*&quot;</span>)  <span class="comment">// 允许的请求头</span></span><br><span class="line">            .allowCredentials(<span class="literal">true</span>)  <span class="comment">// 是否允许发送凭证（如 Cookie）</span></span><br><span class="line">            .maxAge(<span class="number">3600</span>);  <span class="comment">// 预检请求的缓存时间（秒）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>可以正常拿到SessionID，进而存储和使用数据了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 跨域 </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Java中使用ThreadLocal</title>
      <link href="/posts/2d276131.html"/>
      <url>/posts/2d276131.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是ThreadLocal"><a href="#什么是ThreadLocal" class="headerlink" title="什么是ThreadLocal"></a>什么是ThreadLocal</h3><p>它是一个线程本地变量，访问这个变量的每个线程都会有这个变量的一个本地拷贝（副本），多个线程操作的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免线程安全问题。</p><p>如下面的演示程序：</p><figure class="highlight java"><figcaption><span>Main.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">            threadLocal.set(<span class="number">0</span>);</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">        &#125;, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">            threadLocal.set(<span class="number">2</span>);</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">        &#125;, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        thread.join();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的输出是 <code>null 0 null 2</code></p><h3 id="实现的原理"><a href="#实现的原理" class="headerlink" title="实现的原理"></a>实现的原理</h3><p>通过一个Key-Value形式，将当前线程的值存入ThreadLocal中，也就是ThreadLocalMap，每个Thread对象都有一个ThreadLocalMap，Key为ThreadLocal对象，Valueh为需要缓存的值。</p><figure class="highlight java"><figcaption><span>ThreadLocal.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();<span class="comment">//获取当前线程</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);<span class="comment">//拿到当前线程的ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);<span class="comment">//存在这个Map就直接修改</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createMap(t, value);<span class="comment">//不存在就创建</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="comment">//不为空则从Map中取出来</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到Map</p><figure class="highlight java"><figcaption><span>ThreadLocal.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ThreadLocal.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ThreadLoca.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">setInitialValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> initialValue();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> TerminatingThreadLocal) &#123;</span><br><span class="line">        TerminatingThreadLocal.register((TerminatingThreadLocal&lt;?&gt;) <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>make和Cmake略解</title>
      <link href="/posts/1a349ac7.html"/>
      <url>/posts/1a349ac7.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h2><figure class="highlight c"><figcaption><span>hello.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;message.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    sayHello();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>message.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>message.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;message.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world lnpbqc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c message.c -o hello</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure><h2 id="使用构建工具"><a href="#使用构建工具" class="headerlink" title="使用构建工具"></a>使用构建工具</h2><p>只是一些简单的项目和文件结构当然可以这样写，但要是复杂起来就不是那么友好了。</p><p>这个时候就需要启用<mark class="hl-label green">make</mark> 和<mark class="hl-label green">cmake</mark> 了。</p><h2 id="make的简单使用"><a href="#make的简单使用" class="headerlink" title="make的简单使用"></a>make的简单使用</h2><blockquote><p>make 是一个构建自动化工具，广泛应用于软件开发中，尤其在 Unix 和 Linux 环境下。<br>它通过读取名为 Makefile(<em>当然可以读取其他文件，后续介绍</em>) 的文件，根据其中定义的规则和依赖关系来编译和链接程序</p></blockquote><blockquote><p>make: 默认情况下，make 会执行 Makefile 中第一个目标（通常是 all 或主目标）。<br>make target: 只执行特定目标的规则。例如 make clean 只会执行 clean 规则。<br>make -j [N]: 并行构建，N 指定并行的任务数，可以加速编译。<br>使用make -f 指定文件名字 来根据其他Makefile规则编译<br>使用make -n 只打印命令不执行<br>使用make -C 目录 指定makefile工作目录</p></blockquote><p>基本的结构：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成目标：依赖文件</span><br><span class="line">命令</span><br></pre></td></tr></table></figure><p>由此即可编写基本make文件：</p><figure class="highlight makefile"><figcaption><span>makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hello: main.c message.c</span></span><br><span class="line">gcc main.c message.c -o hello</span><br></pre></td></tr></table></figure><p>这样，只要<code>main.c</code>或者<code>message.c</code>发生改变，使用<code>make</code>命令即可完成编译。如果没有改变文件，则不会重新编译。</p><h3 id="部分依赖编译"><a href="#部分依赖编译" class="headerlink" title="部分依赖编译"></a>部分依赖编译</h3><p>那么如果文件过多，有更多的依赖需要编译，但你只是改动了其中部分文件，不想全部重新编译，也可以分开编译中间文件，最后链接。</p><figure class="highlight makefile"><figcaption><span>makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean all</span></span><br><span class="line">//.PHONY 表示后面是一个命令，而不会作为一个文件被make识别</span><br><span class="line"></span><br><span class="line"><span class="section">hello: main.o message.o</span></span><br><span class="line">gcc main.o message.o -o hello</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">message.o: message.c</span></span><br><span class="line">gcc -c message.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o hello</span><br></pre></td></tr></table></figure><p>这样一来，只是改动部分文件，而不需要全部重新编译。</p><h3 id="有多个目标程序生成"><a href="#有多个目标程序生成" class="headerlink" title="有多个目标程序生成"></a>有多个目标程序生成</h3><p>可以使用按照make的特性，把目标程序作为依赖，来实现多个目标同时编译</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean all</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: hello world</span></span><br><span class="line">@echo <span class="string">&quot;Done&quot;</span></span><br><span class="line">// 在命令前面添加 @ 只会显示执行结果，而不会显示命令本身，@echo <span class="string">&quot;Done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">hello: main.o message.o</span></span><br><span class="line">gcc main.o message.o -o hello</span><br><span class="line"></span><br><span class="line"><span class="section">world: main.o message.o</span></span><br><span class="line">gcc main.o message.o -o world</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">message.o: message.c</span></span><br><span class="line">gcc -c message.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o hello world</span><br></pre></td></tr></table></figure><p>而进一步地，相同生成规则可以写在一起。</p><figure class="highlight makefile"><figcaption><span>makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean all</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: hello world</span></span><br><span class="line">@echo <span class="string">&quot;Done&quot;</span></span><br><span class="line"></span><br><span class="line">hello world:main.o message.o</span><br><span class="line">gcc main.o message.o -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">message.o: message.c</span></span><br><span class="line">gcc -c message.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o hello world</span><br></pre></td></tr></table></figure><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>对应重复使用的值，可以通过变量一起管理，方便后续更改。</p><p><strong>自动变量</strong></p><ul><li>$@ 表示目标文件</li><li>$&lt; 表示第一个依赖</li><li>$^ 表示所有依赖</li></ul><figure class="highlight makefile"><figcaption><span>makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean all</span></span><br><span class="line"></span><br><span class="line">CFLAGS = -Wall -g -O2</span><br><span class="line">targets = hello world</span><br><span class="line">sources = main.c message.c</span><br><span class="line">objects = main.o message.o</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(targets)</span></span></span><br><span class="line">@echo <span class="string">&quot;Done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(targets)</span>:<span class="variable">$(objects)</span></span><br><span class="line">gcc <span class="variable">$(CFLAGS)</span> <span class="variable">$(objects)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc <span class="variable">$(CFLAGS)</span> -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">message.o: message.c</span></span><br><span class="line">gcc <span class="variable">$(CFLAGS)</span> -c message.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o hello world</span><br></pre></td></tr></table></figure><p>对于同样的文件后缀有着同样处理逻辑的，可以进步这样省略。<br><strong>使用通配符简化</strong></p><figure class="highlight makefile"><figcaption><span>makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">gcc <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>一个完整的<mark class="hl-label green">Makefile</mark> 如下所示。</p><figure class="highlight makefile"><figcaption><span>makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义编译器和编译标志</span></span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -Wall -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标可执行文件</span></span><br><span class="line">TARGET = HelloWorld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标规则</span></span><br><span class="line"><span class="variable">$(TARGET)</span>: main.o message.o</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -o <span class="variable">$(TARGET)</span> main.o message.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译目标文件</span></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">message.o: message.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c message.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理构建文件</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f <span class="variable">$(TARGET)</span> *.o</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Cmake的初级使用"><a href="#Cmake的初级使用" class="headerlink" title="Cmake的初级使用"></a>Cmake的初级使用</h2><blockquote><p>CMake 是一个跨平台的构建系统生成工具，广泛用于软件开发中，特别是在需要生成项目的构建系统配置文件（如 Makefile 或 Visual Studio 项目文件）时。<br>CMake 的主要功能是通过一个简单的脚本语言（CMakeLists.txt）来描述项目结构、依赖关系、编译和链接规则，然后为不同的平台生成相应的构建文件。</p></blockquote><p>一个简单的<mark class="hl-label green">CmakeLists.txt</mark> 示例如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line"></span><br><span class="line">project(HelloWorld)</span><br><span class="line"></span><br><span class="line"># 定义变量</span><br><span class="line">set(C_SOURCES hello.c message.c)</span><br><span class="line">message(&quot;C_SOURCES: $&#123;C_SOURCES&#125;&quot;)</span><br><span class="line"></span><br><span class="line">add_executable(HelloWorld $&#123;C_SOURCES&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>使用 cmake -S CmakeLists.txt所在目录 -B 生成的编译目录</li><li>使用 cmake –build 编译生成目录</li></ul><div class="note green flat"><p>当你修改源文件后，你可以直接使用以下命令进行重新编译：<br><code>cmake --build build</code><br>不需要重新运行 <code>cmake -S . -B build</code>，因为构建系统已经生成好了。<br>如果你只是在编辑 .c 文件或其他源文件，直接运行 cmake –build build 就会重新编译受影响的部分，并生成更新后的可执行文件。</p><p>什么时候需要重新运行 cmake -S . -B build？<br>你只需要重新运行 <code>cmake -S . -B build</code> 或者执行类似步骤的情况包括：</p><p>修改了 CMakeLists.txt 文件：例如添加新的源文件、更改编译选项、添加新的库依赖等。<br>移动或删除了源文件：比如你更改了文件路径或文件名。<br>更换了编译工具链：例如从 make 切换到 ninja，或者从 gcc 切换到 clang。<br>在这些情况下，CMake 需要重新配置构建系统，所以你需要重新执行 <code>cmake -S . -B build</code>。</p></div>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 语言编译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> make </tag>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java连接Redis</title>
      <link href="/posts/da220756.html"/>
      <url>/posts/da220756.html</url>
      
        <content type="html"><![CDATA[<h3 id="使用Jedis"><a href="#使用Jedis" class="headerlink" title="使用Jedis"></a>使用Jedis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>RedisDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">        jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;**.**.**.**&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，为基本使用。</p><h4 id="Jedis的连接池"><a href="#Jedis的连接池" class="headerlink" title="Jedis的连接池"></a>Jedis的连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">// 最大连接数</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 最大空闲数</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">8</span>);;</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 最长等待时间</span></span><br><span class="line">        jedisPoolConfig.setMaxWait(Duration.ofMillis(<span class="number">200</span>));</span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig,<span class="string">&quot;**.**.**.**&quot;</span>,<span class="number">6379</span>,<span class="number">1000</span>,<span class="string">&quot;123&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">        jedis = JedisConnectionFactory.getJedis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jedis!=<span class="literal">null</span>)&#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testPool</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;hunan:name&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用SpringDataRedis"><a href="#使用SpringDataRedis" class="headerlink" title="使用SpringDataRedis"></a>使用SpringDataRedis</h3><p>在里面提供了<code>RedisTemplate</code>工具类，封装Redis的操作，如API<code>redisTemplate.opsForValue()</code>返回<code>ValueOperations</code>来操作String类型。</p><p>在创建的时候勾选<code>SpringDataRedis</code>。</p><p>pom.xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">**.**.**.**</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.data.redis:</span> <span class="string">DEBUG</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解决序列化因素-自定义RedisTemplate"><a href="#解决序列化因素-自定义RedisTemplate" class="headerlink" title="解决序列化因素-自定义RedisTemplate"></a>解决序列化因素-自定义RedisTemplate</h4><p>避免在序列化时候错误序列化<strong>即你存的和实际存的不一样</strong>，可以创建一个返回redisTemplate的Bean，其中Key使用String序列化对象，Value使用Json序列化对象。</p><p>首先添加jackson以来到pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.redisdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用自带的StringRedisTemplate"><a href="#使用自带的StringRedisTemplate" class="headerlink" title="使用自带的StringRedisTemplate"></a>使用自带的StringRedisTemplate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.redisdemo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testObject2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">china</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;china&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> mapper.writeValueAsString(china);</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,string);</span><br><span class="line"></span><br><span class="line">    string = stringRedisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    china = mapper.readValue(string,User.class);</span><br><span class="line">    System.out.println(china);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用于测试用的文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.redisdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.redisdemo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemoApplicationTests</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">System.out.println(redisTemplate);</span><br><span class="line"><span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">System.out.println(name);</span><br><span class="line">name.set(<span class="string">&quot;asd&quot;</span>,<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testObject1</span><span class="params">()</span>&#123;</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lnpbqc&quot;</span>,<span class="number">18</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testObject2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">china</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;china&quot;</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> mapper.writeValueAsString(china);</span><br><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,string);</span><br><span class="line"></span><br><span class="line">string = stringRedisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">china = mapper.readValue(string,User.class);</span><br><span class="line">System.out.println(china);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> 使用Java连接Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构略解</title>
      <link href="/posts/ab6ae3ea.html"/>
      <url>/posts/ab6ae3ea.html</url>
      
        <content type="html"><![CDATA[<h3 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h3><p>Redis是key-value的数据库，key一般为String，value多种多样：</p><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>SortedSet<br>以上为基本类型，以下为特殊类型</li></ul><ul><li>GEO</li><li>BitMap</li><li>HyperLog</li></ul><h3 id="Key的层级"><a href="#Key的层级" class="headerlink" title="Key的层级"></a>Key的层级</h3><p>Redis的key允许多个单词形成层级，单词之间以<code>：</code>隔开，示例如下：</p><blockquote><p>项目名：业务名：类型：id</p></blockquote><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p><a href="https://redis.io/commands">官网文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> @group <span class="comment">#查看对应的类型的命令</span></span><br></pre></td></tr></table></figure><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keys &lt;pattern&gt; <span class="comment">#查看符合的key，太多单线程会阻塞</span></span><br><span class="line">del &lt;key&gt; [key...] <span class="comment">#删除符合的key，返回成功删除的数量</span></span><br><span class="line">exists &lt;key&gt; [key...] <span class="comment">#判断是否存在</span></span><br><span class="line">expire &lt;key&gt; &lt;time&gt; <span class="comment">#给key设置有效期（秒）</span></span><br><span class="line">ttl &lt;key&gt; <span class="comment">#查看key的存活事件，-1表永久有效，-2表失效（即没有）</span></span><br></pre></td></tr></table></figure><h4 id="String命令"><a href="#String命令" class="headerlink" title="String命令"></a>String命令</h4><p>又根据字符串实际格式，分为三类：</p><ul><li>string</li><li>int</li><li>float<blockquote><p>不超过512m</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> &lt;key&gt; &lt;value&gt; [nx] [ex time] <span class="comment">#添加值</span></span><br><span class="line">get &lt;key&gt; <span class="comment">#获取值</span></span><br><span class="line">mset &lt;key value&gt;[key value...] <span class="comment">#添加多个值</span></span><br><span class="line">mget &lt;key&gt; [key...] <span class="comment">#获得多个值，对应返回</span></span><br><span class="line">incr &lt;key&gt; <span class="comment">#整数自增</span></span><br><span class="line">incrby &lt;key&gt; &lt;increment&gt; <span class="comment">#让整数增长increment</span></span><br><span class="line">decr &lt;key&gt; <span class="comment">#整数自减</span></span><br><span class="line">incrbyfloat &lt;key&gt; &lt;increment&gt; <span class="comment">#浮点增长</span></span><br><span class="line">setnx &lt;key&gt; &lt;value&gt; <span class="comment">#如果key不存在就新增</span></span><br><span class="line">setex &lt;key&gt; &lt;value&gt; &lt;time&gt; <span class="comment">#新增并设置有效期</span></span><br></pre></td></tr></table></figure><h4 id="Hash命令"><a href="#Hash命令" class="headerlink" title="Hash命令"></a>Hash命令</h4><p><em>与String的区别：String是将对象序列化成JSON存储，无法修改某个字段。而Hash则是将每个字段单独存储，可以单独CRUD</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hset &lt;key&gt; &lt;filed&gt; &lt;value&gt; [nx] <span class="comment">#对某个对象的字段添加</span></span><br><span class="line">hget &lt;key&gt; &lt;field&gt; <span class="comment">#获取值</span></span><br><span class="line">hmset &lt;key&gt; &lt;filed&gt; &lt;value&gt;[field value...] <span class="comment">#一个key添加多个字段</span></span><br><span class="line">hmget &lt;key&gt; &lt;filed&gt; [field...] <span class="comment">#获得多个值，对应返回</span></span><br><span class="line">hgetall &lt;key&gt; <span class="comment">#获取key的所有字段</span></span><br><span class="line">hkeys <span class="comment">#获取所有key值</span></span><br><span class="line">hvals <span class="comment">#获取所有值</span></span><br><span class="line">hincrby &lt;key&gt; &lt;field&gt; &lt;increment&gt; <span class="comment">#让整数增长increment</span></span><br><span class="line">hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt; <span class="comment">#如果field不存在就新增</span></span><br></pre></td></tr></table></figure><h4 id="List命令"><a href="#List命令" class="headerlink" title="List命令"></a>List命令</h4><ul><li>有序</li><li>可重复</li><li>操作快</li><li>查询一般</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lpush &lt;key&gt; &lt;value&gt; [value ...]</span><br><span class="line">lpop &lt;key&gt; [count]</span><br><span class="line">rpush &lt;key&gt; &lt;value&gt; [value ...]</span><br><span class="line">rpop &lt;key&gt; [count]</span><br><span class="line"><span class="comment"># 上面可以相当于双端队列</span></span><br><span class="line"></span><br><span class="line">lrange &lt;key&gt; start end <span class="comment">#获取key的列表的下标范围值(零开始)</span></span><br><span class="line">blpop &lt;key&gt; &lt;<span class="built_in">timeout</span>&gt; <span class="comment">#block 如果没有会等待时间</span></span><br><span class="line">brpop &lt;key&gt; &lt;<span class="built_in">timeout</span>&gt; <span class="comment">#block 如果没有会等待时间</span></span><br></pre></td></tr></table></figure><h4 id="Set命令"><a href="#Set命令" class="headerlink" title="Set命令"></a>Set命令</h4><ul><li>无序</li><li>不可重复</li><li>查找快</li><li>支持并交差集等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sadd &lt;key&gt; &lt;value&gt; <span class="comment">#添加元素</span></span><br><span class="line">srem &lt;key&gt; &lt;value&gt; <span class="comment">#删除元素</span></span><br><span class="line">scard &lt;key&gt; <span class="comment">#返回集合大小</span></span><br><span class="line">sismember &lt;key&gt; &lt;value&gt; <span class="comment">#集合是否存在对应元素</span></span><br><span class="line">smembers &lt;key&gt; <span class="comment">#集合中的元素</span></span><br><span class="line">sinter &lt;key1&gt; &lt;key2&gt; <span class="comment">#两个集合的交集</span></span><br><span class="line">sdiff &lt;key1&gt; &lt;key2&gt; <span class="comment">#差集</span></span><br><span class="line">sunion &lt;key1&gt; &lt;key2&gt; <span class="comment">#并集</span></span><br></pre></td></tr></table></figure><h4 id="SortedSet命令"><a href="#SortedSet命令" class="headerlink" title="SortedSet命令"></a>SortedSet命令</h4><blockquote><p>底层实现是一个跳表加Hash<br>常应用在排行榜</p></blockquote><ul><li>可排序</li><li>不重复</li><li>查询快<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zadd &lt;key&gt; &lt;score&gt; &lt;value&gt; <span class="comment">#添加一个元素或多个元素到集合中，若存在更新score</span></span><br><span class="line">zrem &lt;key&gt; &lt;value&gt; <span class="comment">#移除元素</span></span><br><span class="line">zscore &lt;key&gt; &lt;value&gt; <span class="comment">#获取score值</span></span><br><span class="line">zrank &lt;key&gt; &lt;value&gt; <span class="comment">#获取排名</span></span><br><span class="line">zcard &lt;key&gt;<span class="comment">#获取个数</span></span><br><span class="line">zcount &lt;key&gt; &lt;min&gt; &lt;max&gt; <span class="comment">#统计[min,max]范围的个数</span></span><br><span class="line"></span><br><span class="line">zincrby &lt;key&gt; &lt;increment&gt; &lt;value&gt; <span class="comment">#指定元素自增</span></span><br><span class="line">zrange &lt;key&gt; &lt;min&gt; &lt;max&gt; <span class="comment">#按照score排名，获取排名在[min,max]的元素</span></span><br><span class="line">zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; <span class="comment">#按照score，获取分数在[min,max]的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在中间加入rev，即反转，如zrevrange &lt;key&gt; &lt;min&gt; &lt;max&gt; #反向排序</span></span><br><span class="line"></span><br><span class="line">zinter &lt;key1&gt; &lt;key2&gt; <span class="comment">#两个集合的交集</span></span><br><span class="line">zdiff &lt;key1&gt; &lt;key2&gt; <span class="comment">#差集</span></span><br><span class="line">zunion &lt;key1&gt; &lt;key2&gt; <span class="comment">#并集</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> Redis数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装配置Redis</title>
      <link href="/posts/280089b4.html"/>
      <url>/posts/280089b4.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Ubuntu 已经配置好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install redis</span><br></pre></td></tr></table></figure><h3 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h3><ul><li><p>redis.conf </p><blockquote><p>Ubuntu系统在&#x2F;etc&#x2F;redis下面</p></blockquote></li></ul><h3 id="命令配置"><a href="#命令配置" class="headerlink" title="命令配置"></a>命令配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service redis-server restart</span><br><span class="line">service redis-server status</span><br><span class="line">service redis start</span><br><span class="line">service redis stop</span><br></pre></td></tr></table></figure><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><h5 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h5><blockquote><p>redis-cli [options] [command]</p><ul><li><p>-h 127.0.0.1：地址</p></li><li><p>-p 6379：端口</p></li><li><p>-a 123：密码</p><blockquote><p>直接指定不安全，可以省略，在打开后的交互命令行输入<code>auth 用户 密码</code>或者<code>auth 密码</code>进行登录</p></blockquote></li></ul></blockquote><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p><a href="https://github.com/lework/RedisDesktopManager-Windows/releases">网站下载地址</a></p><p><a href="https://redis.io/insight/">官方工具下载地址</a></p><h5 id="语言配置"><a href="#语言配置" class="headerlink" title="语言配置"></a>语言配置</h5><blockquote><p>请关注后续更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> 安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装/配置Freeglut</title>
      <link href="/posts/c2835fa6.html"/>
      <url>/posts/c2835fa6.html</url>
      
        <content type="html"><![CDATA[<h2 id="怎么办怎么办要学习计算机图形学了"><a href="#怎么办怎么办要学习计算机图形学了" class="headerlink" title="怎么办怎么办要学习计算机图形学了"></a>怎么办怎么办要学习计算机图形学了</h2><p>配置环境对每个人来说都十分的苦恼，即便我按照老师的步骤一步步来，也没成功<del>（什么情况？这就是配置的魅力所在）</del></p><h2 id="配置须知"><a href="#配置须知" class="headerlink" title="配置须知"></a>配置须知</h2><div class="note green flat"><p>我只能保证在我这样的环境下能正常运行。</p></div><ul><li>系统：Windows10教育版（21H2，19044.1766）</li></ul><h2 id="配置前准备"><a href="#配置前准备" class="headerlink" title="配置前准备"></a>配置前准备</h2><p>首先请准备好以下安装包（链接不保真）：</p><ul><li>Dev-C++ v5.11（无编译器版）:<a href="https://sourceforge.net/projects/orwelldevcpp">下载地址</a></li><li>Cmake v3.13.5:<a href="https://github.com/Kitware/CMake/releases/download/v3.13.5/cmake-3.13.5-win32-x86.msi">下载地址</a></li><li>GCC v8.1.0:<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/8.1.0/threads-posix/dwarf/i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z">下载地址</a></li><li>Freeglut v3.6.0:<a href="https://sourceforge.net/projects/freeglut/files/freeglut/3.6.0/freeglut-3.6.0.tar.gz/download">下载地址</a></li></ul><h2 id="安装与解压"><a href="#安装与解压" class="headerlink" title="安装与解压"></a>安装与解压</h2><p>对于<mark class="hl-label green">Dev-C++</mark>  和 <mark class="hl-label green">Cmake</mark> 直接双击安装即可，注意安装位置，同时在安装Cmake的时候记的选择 <mark class="hl-label blue">导入Path，创建桌面图标</mark>  选项。</p><blockquote><p>如果没有导入系统路径，请自行搜索导入。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cmake --version</span><br><span class="line"><span class="comment">#cmake version 3.13.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CMake suite maintained and supported by Kitware (kitware.com/cmake).</span></span><br></pre></td></tr></table></figure><p>对于<mark class="hl-label green">GCC</mark>  和 <mark class="hl-label green">Freeglut</mark> 解压到合适的目录即可。</p><p>将解压的GCC文件夹<mark class="hl-label green">mingw32</mark> 复制粘贴到如<mark class="hl-label blue">C:\Program Files (x86)\Dev-Cpp</mark> 的Dev-C++安装目录下。</p><p><img src="/posts/c2835fa6/mingw32%E8%B7%AF%E5%BE%84.png" alt="mingw32路径"></p><blockquote><p>自行将<mark class="hl-label blue">mingw32/bin</mark> 添加到系统路径。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ g++ --version</span><br><span class="line"><span class="comment">#g++ (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0</span></span><br><span class="line"><span class="comment">#Copyright (C) 2018 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment">#This is free software; see the source for copying conditions.  There is NO</span></span><br><span class="line"><span class="comment">#warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br></pre></td></tr></table></figure><h3 id="编译Freeglut"><a href="#编译Freeglut" class="headerlink" title="编译Freeglut"></a>编译Freeglut</h3><ul><li>双击打开<mark class="hl-label green">Cmake</mark> 。</li><li>选择Freeglut之前解压的目录和Cmake输出目录。<br><img src="/posts/c2835fa6/%E7%BC%96%E8%AF%91Freeglut-1.png" alt="选择目录"></li><li>选择生成器（generator)为 <mark class="hl-label blue">Mingw Makefiles</mark> ,其他默认。</li><li>点击 <mark class="hl-label blue">Configure</mark> ，出现报红，更改其中的值（install是指在编译后输出的目录，如在<code>C:/Users/lnpbqc/Documents/freeglut-build/install</code>下面）。<br><img src="/posts/c2835fa6/%E7%BC%96%E8%AF%91Freeglut-2.png" alt="选择Cmake配置"></li><li>点击<mark class="hl-label blue">Configure</mark> ，<mark class="hl-label blue">Generate</mark> ，后打开<code>C:/Users/lnpbqc/Documents/freeglut-build</code></li><li>在<mark class="hl-label blue">文件夹</mark> 中打开<code>cmd</code>,输入 <code>mingw32-make install</code>，等待完成即可。</li><li>得到 <code>install</code> 文件夹，里面有<code>bin</code>，<code>include</code>，<code>lib</code>。</li><li>将其复制到<mark class="hl-label blue">Dev-C++安装目录下</mark> ，重命名为<code>opengl</code>。<br><img src="/posts/c2835fa6/%E7%BC%96%E8%AF%91Freeglut-3.png" alt="Freeglut目录情况"></li></ul><h2 id="自此可以来配置Dev-C-了"><a href="#自此可以来配置Dev-C-了" class="headerlink" title="自此可以来配置Dev-C++了"></a>自此可以来配置Dev-C++了</h2><p>这个没什么说的，把对应的目录添加进来即可，下面给出我的例子。<br><img src="/posts/c2835fa6/%E9%85%8D%E7%BD%AEDev-1.png" alt="新建配置及链接说明"><br><img src="/posts/c2835fa6/%E9%85%8D%E7%BD%AEDev-2.png" alt="添加二进制文件"><br><img src="/posts/c2835fa6/%E9%85%8D%E7%BD%AEDev-3.png" alt="添加库文件"><br><img src="/posts/c2835fa6/%E9%85%8D%E7%BD%AEDev-4.png" alt="添加C头文件"><br><img src="/posts/c2835fa6/%E9%85%8D%E7%BD%AEDev-5.png" alt="添加C++头文件"><br><img src="/posts/c2835fa6/%E9%85%8D%E7%BD%AEDev-6.png" alt="配置对应程序"></p><p>最后确定保存即可。</p><h2 id="运行Glut程序"><a href="#运行Glut程序" class="headerlink" title="运行Glut程序"></a>运行Glut程序</h2><p>下面给出一段C语言程序，测试运行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    glutInitWindowPosition(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    glutInitWindowSize(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Reshape</span><span class="params">(<span class="type">int</span> w,<span class="type">int</span> h)</span>&#123;</span><br><span class="line">    glViewport(w/<span class="number">4</span>,h/<span class="number">4</span>,w/<span class="number">2</span>,h/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Paint</span><span class="params">()</span>&#123;</span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    glBegin(GL_TRIANGLES);</span><br><span class="line">    &#123;</span><br><span class="line">        glVertex2d(<span class="number">-0.95</span>,<span class="number">-0.95</span>);</span><br><span class="line">        glVertex2d(<span class="number">0.95</span>,<span class="number">-0.95</span>);</span><br><span class="line">        glVertex2d(<span class="number">0</span>,<span class="number">0.95</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();</span><br><span class="line">glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">glutInit(&amp;argc,argv);</span><br><span class="line">    init();</span><br><span class="line">glutCreateWindow(<span class="string">&quot;First OpenGL!&quot;</span>);</span><br><span class="line">    init2();</span><br><span class="line">glutDisplayFunc(Paint);</span><br><span class="line">    glutReshapeFunc(Reshape);</span><br><span class="line">glutMainLoop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/c2835fa6/ProgramResult.png" alt="运行结果"></p><blockquote><p>一般地，对于这个程序都能正常运行。但我的电脑不一般，所以还需要其他配置，如果也出现相同情况可以参考。</p></blockquote><h2 id="问题及补丁"><a href="#问题及补丁" class="headerlink" title="问题及补丁"></a>问题及补丁</h2><h3 id="undefined-reference"><a href="#undefined-reference" class="headerlink" title="undefined reference"></a>undefined reference</h3><p>可以试着在引入头文件<code>&lt;GL/glut.h&gt;</code>之前加入以下代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GLUT_DISABLE_ATEXIT_HACK </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLUT_DISABLE_ATEXIT_HACK </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="未找到libglut-dll"><a href="#未找到libglut-dll" class="headerlink" title="未找到libglut.dll"></a>未找到libglut.dll</h3><p>可以将前文的<code>opengl/bin</code>目录下的<code>libglut.dll</code>文件拷贝到<code>C:\Windows\SysWOW64</code>下面，即可解决。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
          <category> Freeglut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形 </tag>
            
            <tag> CV </tag>
            
            <tag> GLUT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Fyne实现一个Markdown编辑器</title>
      <link href="/posts/efd5f3e1.html"/>
      <url>/posts/efd5f3e1.html</url>
      
        <content type="html"><![CDATA[<p>前面学习了如何用<mark class="hl-label green">Fyne</mark> 简单搭建一个GUI框架<br>而本网站的博客是使用Markdown进行创作的，理所当然的要写一个 <mark class="hl-label green">基于Fyne的Markdown编辑器</mark> </p><h2 id="程序框架搭建"><a href="#程序框架搭建" class="headerlink" title="程序框架搭建"></a>程序框架搭建</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/dialog&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/storage&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">Edit        *widget.Entry <span class="comment">// 输入区域</span></span><br><span class="line">Preview     *widget.RichText <span class="comment">// 渲染区域</span></span><br><span class="line">CurrentFile fyne.URI <span class="comment">// 文件URI，即文件路径</span></span><br><span class="line">MenuItem    *fyne.MenuItem <span class="comment">// Save菜单选项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cfg config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Markdown编辑器&quot;</span>)</span><br><span class="line"></span><br><span class="line">w.SetContent(container.NewHSplit(cfg.makeUI()))</span><br><span class="line">cfg.createMenu(w)</span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">w.CenterOnScreen()</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> makeUI() (*widget.Entry, *widget.RichText) &#123;</span><br><span class="line">edit := widget.NewMultiLineEntry()</span><br><span class="line">preview := widget.NewRichTextFromMarkdown(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit.OnChanged = preview.ParseMarkdown</span><br><span class="line"></span><br><span class="line">cfg.Edit = edit</span><br><span class="line">cfg.Preview = preview</span><br><span class="line"><span class="keyword">return</span> edit, preview</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> createMenu(win fyne.Window) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里，使用了一个自定义的config结构，里面存储了会用到的一些属性，如输入的文本，输出渲染完成的Markdown文本，已经保存文件路径等。</p><p>使用了<code>container.NewHSplit</code>新容器，它以垂直的分割线左右平分页面。</p><p>在<code>makeUI</code>中，将<code>Edit</code>和<code>Preview</code>等组件与cfg关联起来，而<code>edit.OnChanged = preview.ParseMarkdown</code>则是在编辑区发生变动的时候调用Markdown富文本渲染。</p><h2 id="创建菜单"><a href="#创建菜单" class="headerlink" title="创建菜单"></a>创建菜单</h2><p><img src="/posts/efd5f3e1/image.png" alt="VSC菜单样式"></p><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> createMenu(win fyne.Window) &#123;</span><br><span class="line">open := fyne.NewMenuItem(<span class="string">&quot;Open&quot;</span>, cfg.open(win))</span><br><span class="line">save := fyne.NewMenuItem(<span class="string">&quot;save&quot;</span>, cfg.save(win))</span><br><span class="line">cfg.MenuItem = save</span><br><span class="line">save.Disabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">saveAs := fyne.NewMenuItem(<span class="string">&quot;save as&quot;</span>, cfg.saveAsFunc(win))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜单，相当于VSV上面一行中的一项</span></span><br><span class="line">file := fyne.NewMenu(<span class="string">&quot;File&quot;</span>, open, save, saveAs)</span><br><span class="line">    <span class="comment">// 主菜单栏，相当于VSC上面那一行</span></span><br><span class="line">menu := fyne.NewMainMenu(file)</span><br><span class="line">win.SetMainMenu(menu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> save(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> open(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> saveAsFunc(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里将<mark class="hl-label green">save</mark>  赋值给cfg是为了保证 <mark class="hl-label green">没有打开文件和另存为文件前，用户无法进行保存操作，防止不可预知的错误出现</mark> 。</p><blockquote><p>后续会通过cfg来设置允许保存。</p></blockquote><p>通过回调函数分离实现功能。</p><h2 id="实现对应功能"><a href="#实现对应功能" class="headerlink" title="实现对应功能"></a>实现对应功能</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> save(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 注意此时已经有了保存路径，所以就不是调用 NewFileSave 了，而是通过URI来获取输出流并输出保存</span></span><br><span class="line">writer, err := storage.Writer(cfg.CurrentFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> writer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> writer.Close()</span><br><span class="line"></span><br><span class="line">writer.Write([]<span class="type">byte</span>(cfg.Edit.Text))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> open(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">openDialog := dialog.NewFileOpen(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIReadCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close()</span><br><span class="line"></span><br><span class="line">data, err := io.ReadAll(closer) <span class="comment">// 读取操作</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg.Edit.SetText(<span class="type">string</span>(data))<span class="comment">// 将数据放到编辑区</span></span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI()</span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())</span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span> <span class="comment">// 允许保存</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line"></span><br><span class="line">openDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> saveAsFunc(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">saveDialog := dialog.NewFileSave(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIWriteCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close() <span class="comment">// defer可以理解为在函数的结尾会自动调用后面的函数，IO要记得及时关闭</span></span><br><span class="line">closer.Write([]<span class="type">uint8</span>(cfg.Edit.Text))</span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI() <span class="comment">// 获取输出的URI</span></span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())<span class="comment">// 更新标题</span></span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span> <span class="comment">// 可以保存了</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line">saveDialog.SetFileName(<span class="string">&quot;未命名-&quot;</span> + time.DateOnly + <span class="string">&quot;.md&quot;</span>)</span><br><span class="line">saveDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，基础的<mark class="hl-label green">Markdown编辑器</mark> 的功能就完成了。</p><h2 id="但是打开的文件不只有Markdown怎么办呢"><a href="#但是打开的文件不只有Markdown怎么办呢" class="headerlink" title="但是打开的文件不只有Markdown怎么办呢"></a>但是打开的文件不只有Markdown怎么办呢</h2><p>为解决这个问题，可以使用<code>storage.NewExtensionFileFilter</code>来过滤掉不需要的文件。</p><figure class="highlight diff"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var cfg config</span><br><span class="line"><span class="addition">+ var filter = storage.NewExtensionFileFilter([]string&#123;&quot;.md&quot;, &quot;.MD&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">func (cfg *config) open(win fyne.Window) func() &#123;</span><br><span class="line">return func() &#123;</span><br><span class="line">...</span><br><span class="line"><span class="addition">+openDialog.SetFilter(filter)</span></span><br><span class="line"></span><br><span class="line">openDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cfg *config) saveAsFunc(win fyne.Window) func() &#123;</span><br><span class="line">return func() &#123;</span><br><span class="line">...</span><br><span class="line"><span class="addition">+saveDialog.SetFilter(filter)</span></span><br><span class="line"></span><br><span class="line">saveDialog.SetFileName(&quot;未命名-&quot; + time.DateOnly + &quot;.md&quot;)</span><br><span class="line">saveDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="虽然目前已经大体上完成，但还是有一些Bug"><a href="#虽然目前已经大体上完成，但还是有一些Bug" class="headerlink" title="虽然目前已经大体上完成，但还是有一些Bug"></a>虽然目前已经大体上完成，但还是有一些Bug</h2><ul><li>可能保存的文件类型错误（缺省文件类型）</li><li>都在一个文件夹内太过臃肿</li></ul><h3 id="对保存文件的类型进行检查"><a href="#对保存文件的类型进行检查" class="headerlink" title="对保存文件的类型进行检查"></a>对保存文件的类型进行检查</h3><p>在saveAsFunc的方法内部添加一下语句：</p><figure class="highlight diff"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">defer closer.Close()</span><br><span class="line"></span><br><span class="line"><span class="addition">+if !strings.HasSuffix(strings.ToLower(closer.URI().String()), &quot;.md&quot;) &#123;</span></span><br><span class="line"><span class="addition">+    dialog.ShowInformation(&quot;文件类型错误&quot;, &quot;必须是 .md 或 .MD&quot;, win)</span></span><br><span class="line"><span class="addition">+    return</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line">closer.Write([]uint8(cfg.Edit.Text))</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分开存放在不同的文件下，便于管理"><a href="#分开存放在不同的文件下，便于管理" class="headerlink" title="分开存放在不同的文件下，便于管理"></a>分开存放在不同的文件下，便于管理</h3><p>此次实操，我就将其分为</p><ul><li>main.go</li><li>ui.go</li><li>config.go</li></ul><div class="note green flat"><p>注意，Golang虽然没有<strong>public,protected,private</strong>这样的修饰符，但能够通过更改首字母的大小写来更改<strong>可见性</strong>。<br>若首字母是大写字母，则表示可以被其他包通过 <strong>import</strong> 来访问，相当于公开；而小写字母的话，则表示在本包内使用，相当于私有。<br>因此，在本节内容的分开存放源代码并不影响其变量和struct等的可见性，直接复制粘贴即可。因为他们都在 <code>package main</code>下面。</p></div><h2 id="最后的源码"><a href="#最后的源码" class="headerlink" title="最后的源码"></a>最后的源码</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/storage&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">Edit        *widget.Entry</span><br><span class="line">Preview     *widget.RichText</span><br><span class="line">CurrentFile fyne.URI</span><br><span class="line">MenuItem    *fyne.MenuItem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cfg config</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter = storage.NewExtensionFileFilter([]<span class="type">string</span>&#123;<span class="string">&quot;.md&quot;</span>, <span class="string">&quot;.MD&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Markdown编辑器&quot;</span>)</span><br><span class="line"></span><br><span class="line">w.SetContent(container.NewHSplit(cfg.makeUI()))</span><br><span class="line">cfg.createMenu(w)</span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">w.CenterOnScreen()</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight golang"><figcaption><span>ui.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> makeUI() (*widget.Entry, *widget.RichText) &#123;</span><br><span class="line">edit := widget.NewMultiLineEntry()</span><br><span class="line">preview := widget.NewRichTextFromMarkdown(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit.OnChanged = preview.ParseMarkdown</span><br><span class="line"></span><br><span class="line">cfg.Edit = edit</span><br><span class="line">cfg.Preview = preview</span><br><span class="line"><span class="keyword">return</span> edit, preview</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> createMenu(win fyne.Window) &#123;</span><br><span class="line">open := fyne.NewMenuItem(<span class="string">&quot;Open&quot;</span>, cfg.open(win))</span><br><span class="line">save := fyne.NewMenuItem(<span class="string">&quot;save&quot;</span>, cfg.save(win))</span><br><span class="line">cfg.MenuItem = save</span><br><span class="line">save.Disabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">saveAs := fyne.NewMenuItem(<span class="string">&quot;save as&quot;</span>, cfg.saveAsFunc(win))</span><br><span class="line"></span><br><span class="line">file := fyne.NewMenu(<span class="string">&quot;File&quot;</span>, open, save, saveAs)</span><br><span class="line"></span><br><span class="line">menu := fyne.NewMainMenu(file)</span><br><span class="line">win.SetMainMenu(menu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight golang"><figcaption><span>config.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/dialog&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/storage&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> save(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">writer, err := storage.Writer(cfg.CurrentFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> writer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> writer.Close()</span><br><span class="line"></span><br><span class="line">writer.Write([]<span class="type">byte</span>(cfg.Edit.Text))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> open(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">openDialog := dialog.NewFileOpen(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIReadCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close()</span><br><span class="line"></span><br><span class="line">data, err := io.ReadAll(closer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg.Edit.SetText(<span class="type">string</span>(data))</span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI()</span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())</span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line">openDialog.SetFilter(filter)</span><br><span class="line"></span><br><span class="line">openDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> saveAsFunc(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">saveDialog := dialog.NewFileSave(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIWriteCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(strings.ToLower(closer.URI().String()), <span class="string">&quot;.md&quot;</span>) &#123;</span><br><span class="line">dialog.ShowInformation(<span class="string">&quot;文件类型错误&quot;</span>, <span class="string">&quot;必须是 .md 或 .MD&quot;</span>, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closer.Write([]<span class="type">uint8</span>(cfg.Edit.Text))</span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI()</span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())</span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line"></span><br><span class="line">saveDialog.SetFilter(filter)</span><br><span class="line"></span><br><span class="line">saveDialog.SetFileName(<span class="string">&quot;未命名-&quot;</span> + time.DateOnly + <span class="string">&quot;.md&quot;</span>)</span><br><span class="line">saveDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>接下来使用下面的命令进行打包即可随时随地使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fyne package -os windows -icon lnpbqc.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Fyne框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Fyne </tag>
            
            <tag> Markdown编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Go的FyneGUI框架</title>
      <link href="/posts/755f3e3d.html"/>
      <url>/posts/755f3e3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="初体验Go的GUI框架"><a href="#初体验Go的GUI框架" class="headerlink" title="初体验Go的GUI框架"></a>初体验Go的GUI框架</h2><h3 id="首先安装好Go和mingw编译器并配置完成"><a href="#首先安装好Go和mingw编译器并配置完成" class="headerlink" title="首先安装好Go和mingw编译器并配置完成"></a>首先安装好Go和mingw编译器并配置完成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">$ g++ -v</span><br></pre></td></tr></table></figure><h3 id="安装Fyne框架"><a href="#安装Fyne框架" class="headerlink" title="安装Fyne框架"></a>安装Fyne框架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go mod init <span class="built_in">test</span></span><br><span class="line">$ go get fyne.io/fyne/v2</span><br></pre></td></tr></table></figure><h3 id="编写HelloWorld"><a href="#编写HelloWorld" class="headerlink" title="编写HelloWorld"></a>编写HelloWorld</h3><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Go gogo&quot;</span>)</span><br><span class="line">hello := widget.NewLabel(<span class="string">&quot;Hello Fyne!&quot;</span>)</span><br><span class="line">w.SetContent(container.NewVBox(</span><br><span class="line">hello,</span><br><span class="line">widget.NewButton(<span class="string">&quot;Hi!&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">hello.SetText(<span class="string">&quot;Welcome :)&quot;</span>)</span><br><span class="line">&#125;),</span><br><span class="line">))</span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">400</span>, <span class="number">200</span>))</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go mod tidy <span class="comment"># 清理 go.mod 文件，移除不需要的依赖，确保使用的依赖在文件中声明</span></span><br><span class="line">$ go run . <span class="comment"># 表示运行所有 package main 的 go文件</span></span><br></pre></td></tr></table></figure><div class="note flat"><p>第一次编译可能需要时间较长</p></div><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/posts/755f3e3d/image.png" alt="运行结果"></p><h2 id="初体验的后进阶测试"><a href="#初体验的后进阶测试" class="headerlink" title="初体验的后进阶测试"></a>初体验的后进阶测试</h2><div class="note green flat"><p>那么如何去实现日常使用程序中的点击按钮打开新窗口的操作呢？</p></div><p>如果你不是小白的话，通过上述例子已经能举一反三自己完成了。</p><p>注意到 <code>widget.NewButton(&quot;Hi!&quot;, func() &#123;             hello.SetText(&quot;Welcome :)&quot;)         &#125;),</code> 这个元素内的内容，里面定义了一个回调函数，因此我们可以在这里去实现相关操作。</p><figure class="highlight diff"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">w.SetContent(container.NewVBox(</span><br><span class="line">    hello,</span><br><span class="line">    widget.NewButton(&quot;Hi!&quot;, func() &#123;</span><br><span class="line"><span class="deletion">-       hello.SetText(&quot;Welcome :)&quot;)</span></span><br><span class="line"><span class="addition">+       wt := a.NewWindow(&quot;新窗口&quot;)</span></span><br><span class="line"><span class="addition">+       wt.SetContent(widget.NewLabel(&quot;这是新窗口的内容&quot;))</span></span><br><span class="line"><span class="addition">+       wt.Show()</span></span><br><span class="line">    &#125;),</span><br><span class="line">))</span><br></pre></td></tr></table></figure><div class="note flat"><p>如果出现中文乱码，可以通过更改字体样式来解决。</p></div><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/posts/755f3e3d/image2.png" alt="点击按钮后效果"></p><h2 id="进一步使用Fyne框架进行交互操作"><a href="#进一步使用Fyne框架进行交互操作" class="headerlink" title="进一步使用Fyne框架进行交互操作"></a>进一步使用Fyne框架进行交互操作</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Go gogo&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里使用一个函数将UI抽离出逻辑流，接收返回的组件指针</span></span><br><span class="line">w.SetContent(container.NewVBox(makeUI()))</span><br><span class="line"></span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">400</span>, <span class="number">200</span>))</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeUI</span><span class="params">()</span></span> (*widget.Label, *widget.Entry, *widget.Button, *widget.Label, *widget.Button) &#123;</span><br><span class="line">    <span class="comment">// 这个实现的是将输入框的内容显示在标签上</span></span><br><span class="line">output := widget.NewLabel(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">entry := widget.NewEntry()</span><br><span class="line">btn := widget.NewButton(<span class="string">&quot;Click&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">output.SetText(entry.Text)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是实现点击增加数字</span></span><br><span class="line">number := <span class="number">0</span></span><br><span class="line">count := widget.NewLabel(fmt.Sprintf(<span class="string">&quot;Current Number: %d&quot;</span>, number))</span><br><span class="line">incrementBtn := widget.NewButton(<span class="string">&quot;Add&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">number++</span><br><span class="line">count.SetText(fmt.Sprintf(<span class="string">&quot;Current Number: %d&quot;</span>, number))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> output, entry, btn, count, incrementBtn</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note flat"><p><code>container.NewVBox</code> 接收组件和其指针，并将组件垂直的渲染出来</p></div><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="/posts/755f3e3d/image3.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Fyne框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Fyne </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于在Butterfly自定义样式的猜想</title>
      <link href="/posts/16f2d8ad.html"/>
      <url>/posts/16f2d8ad.html</url>
      
        <content type="html"><![CDATA[<div class="note flat"><p>虽然有着Butterfly这样很好看的主题，但是对于我这样的喜欢<del>没事找事</del>的人来说，肯定要来一点点自己的设置，允许自己来<del><mark class="hl-label green">破坏</mark> Butterfly的一致性</del>。</p></div><h2 id="想法起源"><a href="#想法起源" class="headerlink" title="想法起源"></a>想法起源</h2><p>每次打开<mark class="hl-label blue">VSC</mark> 都是 <code>hexo n page</code> 或者 <code>hexo n post</code><br>基于程序员的自我折腾性，我想既然给了page这样新建不同路径的命令，那么就不可能就依靠 <mark class="hl-label green">page</mark>  这一个样式来强迫统一所有的UI。<br>那么，一定存在着某个方法，可以让我在Butterfly的主题下进行自己的<del>创造</del>乱改。</p><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p><strong>注意到</strong>，在博客源文件的根目录下的 <mark class="hl-label default">source</mark> 文件夹存在 <mark class="hl-label default">_posts</mark> 文件，我们写的md文档都会存在这里面。</p><p>由此想到，会不会在 <mark class="hl-label default">themes</mark> 这个管理主题下面会有管理样式的相关文件。</p><p><img src="/posts/16f2d8ad/image.png" alt="主题目录"></p><p><del>以过了六级的英语</del> 易知，<mark class="hl-label default">layout</mark>  文件夹下面存放的就是相关的布局文件。</p><p>打开文件夹就可以看见诸如 <mark class="hl-label default">archive</mark> ，<mark class="hl-label default">page</mark> ，<mark class="hl-label default">post</mark> 等眼熟的单词，直觉中打开 <mark class="hl-label default">page.pug</mark> 后，有以下文件内容</p><figure class="highlight js"><figcaption><span>page.pug</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extends</span> includes/layout.<span class="property">pug</span></span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  #page</span><br><span class="line">    <span class="keyword">if</span> top_img === <span class="literal">false</span></span><br><span class="line">      h1.<span class="property">page</span>-title= page.<span class="property">title</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> page.<span class="property">type</span></span><br><span class="line">      when <span class="string">&#x27;tags&#x27;</span></span><br><span class="line">        include includes/page/tags.<span class="property">pug</span></span><br><span class="line">      when <span class="string">&#x27;link&#x27;</span></span><br><span class="line">        include includes/page/flink.<span class="property">pug</span></span><br><span class="line">      when <span class="string">&#x27;categories&#x27;</span></span><br><span class="line">        include includes/page/categories.<span class="property">pug</span></span><br><span class="line">      <span class="keyword">default</span></span><br><span class="line">        include includes/page/<span class="keyword">default</span>-page.<span class="property">pug</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> page.<span class="property">comments</span> !== <span class="literal">false</span> &amp;&amp; theme.<span class="property">comments</span> &amp;&amp; theme.<span class="property">comments</span>.<span class="property">use</span></span><br><span class="line">      - <span class="keyword">var</span> commentsJsLoad = <span class="literal">true</span></span><br><span class="line">      !=<span class="title function_">partial</span>(<span class="string">&#x27;includes/third-party/comments/index&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到一些在初步配置 Butterfly 的眼熟的结构。<mark class="hl-label green">page.type</mark>  似乎获得的就是 在 <a href="/tags/">标签</a> 和 <a href="/categories/">分类</a> 中配置的 <mark class="hl-label green">type</mark> </p><p>所以我可以在后面添加一行属于我的 <mark class="hl-label green">type</mark> </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case page.type</span><br><span class="line">    when &#x27;tags&#x27;</span><br><span class="line">        include includes/page/tags.pug</span><br><span class="line">    when &#x27;link&#x27;</span><br><span class="line">        include includes/page/flink.pug</span><br><span class="line">    when &#x27;categories&#x27;</span><br><span class="line">        include includes/page/categories.pug</span><br><span class="line"><span class="addition">+    when &#x27;lnpbqc&#x27;</span></span><br><span class="line"><span class="addition">+        include includes/page/lnpbqc.pug</span></span><br><span class="line">    default</span><br><span class="line">        include includes/page/default-page.pug</span><br></pre></td></tr></table></figure><p>由此就在 <code>hexo n page</code>后在 <mark class="hl-label green">Page Front-matter</mark>  中指定 <mark class="hl-label green">type</mark> 为 <mark class="hl-label default">lnpbqc</mark> 即可。</p><p>这样，所有关于 type 是lnpbqc 的页面样式就是自定义的了。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>至于如何写样式，则需要通过 <a href="https://butterfly.js.org/posts/ceeb73f/?highlight=inject#Inject">CSS和JS注入</a> + <a href="https://www.pugjs.cn/language/attributes">Pugjs</a> 来完成。</p><p>本文的目的到此结束，剩下的就需要你自己去学习、去实践、去创造了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程如何解题呢？</title>
      <link href="/posts/2f28f7d1.html"/>
      <url>/posts/2f28f7d1.html</url>
      
        <content type="html"><![CDATA[<p><strong>微分方程是什么？什么是微分方程？怎么解微分方程啊！！！！！！！</strong><br><del><em>我不会我好菜</em></del></p><h2 id="一阶微分方程"><a href="#一阶微分方程" class="headerlink" title="一阶微分方程"></a>一阶微分方程</h2><p>对于</p><p>$$<br>F(x,y,y^{(1)},y^{(2)},…,y^{(n)},)&#x3D;0<br>$$</p><p>这样方程，称之为<strong>n阶微分方程</strong>，其中$y^{(n)}$是必需的。</p><p>当n&#x3D;1时，上述方程称为<strong>一阶微分方程</strong></p><ul><li>通解：含有n个独立的任意常数的函数</li><li>特解：不含任意常数的函数</li></ul><h3 id="变量可分离"><a href="#变量可分离" class="headerlink" title="变量可分离"></a>变量可分离</h3><p>对于y和x部分可以完全分离的，可以写成这样的形式：</p><p>$$<br>\frac{dy}{g(y)}&#x3D;h(x)dx<br>$$</p><p>两边积分，有通解</p><p>$$<br>\int{\frac{dy}{g(y)}}&#x3D;\int{h(x)dx}+C<br>$$</p><h3 id="齐次微分方程"><a href="#齐次微分方程" class="headerlink" title="齐次微分方程"></a>齐次微分方程</h3><p>若有形式</p><p>$$<br>\frac{dy}{dx}&#x3D;f(x,y)<br>$$<br>则可以令</p><p>$$<br>u&#x3D;\frac{y}{x}，即y&#x3D;ux①<br>$$</p><p>同时，两边对x求导，则有</p><p>$$<br>dy&#x3D;dux+dxu，即dy&#x3D;dux+u②<br>$$</p><p>将①②代入到原方程</p><p>$$<br>dux+u &#x3D; g(u)<br>$$</p><p>分离变量，积分可得</p><p>$$<br>\int{\frac{du}{g(u)-u}}&#x3D;\int{\frac{dx}{x}}+C&#x3D;\ln({|x|})+C<br>$$</p><h2 id="一阶线性微分方程"><a href="#一阶线性微分方程" class="headerlink" title="一阶线性微分方程"></a>一阶线性微分方程</h2><p>对于一阶线性微分方程</p><p>$$<br>y^{(1)}+p(x)y&#x3D;q(x)<br>$$</p><p>其通解为</p><p>$$<br>y&#x3D;e^{-\int{p(x)dx}}[\int{q(x)e^{\int{p(x)dx}}dx}+C]<br>$$</p><h2 id="二阶常系数齐次微分方程"><a href="#二阶常系数齐次微分方程" class="headerlink" title="二阶常系数齐次微分方程"></a>二阶常系数齐次微分方程</h2><p>对于<br>$$<br>y\prime\prime+py\prime+qy&#x3D;0<br>$$<br>其中p、q都是常数<br>通过构造特征方程<br>$$<br>r^2+pr+q&#x3D;0<br>$$<br>对于r的根和方程的解有以下对应关系</p><table><thead><tr><th>r根的关系</th><th>方程的解</th></tr></thead><tbody><tr><td>不相等实根 $r_1 \neq r_2$</td><td>$y&#x3D;C_1e^{r_1x}+C_2e^{r_2x}$</td></tr><tr><td>相等实根 $r_1 = r_2$</td><td>$y&#x3D;C_1e^{r_1x}+C_2xe^{r_2x}$</td></tr><tr><td>共轭复根 $r&#x3D;\alpha \pm \beta i$</td><td>$y&#x3D;C_1e^{\alpha x}cos(\beta x)+C_2e^{\alpha x}sin(\beta x)$</td></tr></tbody></table><div class="note flat"><p>可以推广到更高阶，见<strong>2025考研数学·复习全书·基础篇 P208</strong></p></div><h2 id="二阶常系数非齐次微分方程"><a href="#二阶常系数非齐次微分方程" class="headerlink" title="二阶常系数非齐次微分方程"></a>二阶常系数非齐次微分方程</h2><ul><li>首先求出其齐次形式的通解</li><li>再求非齐次的特解(化成非齐次的标准形式)</li></ul><h3 id="类型1-y-prime-prime-py-prime-qy-P-m-x-e-ax"><a href="#类型1-y-prime-prime-py-prime-qy-P-m-x-e-ax" class="headerlink" title="类型1 $y\prime\prime+py\prime+qy&#x3D;P_m(x)e^{ax}$"></a>类型1 $y\prime\prime+py\prime+qy&#x3D;P_m(x)e^{ax}$</h3><p>特解为</p><p>$$<br>y^*(x)&#x3D;e^{ax}R_m(x)x^k<br>$$<br>其中R(x)为m次多项式（系数待定），k为特征方程和a的<strong>相同个数</strong>(0,1,2)</p><h3 id="类型2-y-prime-prime-py-prime-qy-e-ax-P-m-x-cos-bx-Q-m-x-sin-bx"><a href="#类型2-y-prime-prime-py-prime-qy-e-ax-P-m-x-cos-bx-Q-m-x-sin-bx" class="headerlink" title="类型2 $y\prime\prime+py\prime+qy&#x3D;e^{ax}(P_m(x)cos(bx)+Q_m(x)sin(bx))$"></a>类型2 $y\prime\prime+py\prime+qy&#x3D;e^{ax}(P_m(x)cos(bx)+Q_m(x)sin(bx))$</h3><p>特解为</p><p>$$<br>y^*(x)&#x3D;e^{ax}{R_m(x)cos(bx)+S_m(x)sin(bx)}x^k<br>$$<br>其中R(x),S(x)为m次多项式（系数待定），k为特征方程$\alpha \pm \beta i$的 和 $a + bi$ <strong>相同个数</strong>(0,1)</p><h3 id="可降阶方程"><a href="#可降阶方程" class="headerlink" title="可降阶方程"></a>可降阶方程</h3><ul><li><p>没有y和$y\prime$，直接两次积分即可</p></li><li><p>没有y，$y\prime\prime&#x3D;f(x,y\prime)$<br>令$p(x)&#x3D;y\prime,y\prime\prime&#x3D;\frac{dp}{dx}$,有<br>$$<br>\frac{dp}{dx}&#x3D;f(x,p)<br>$$<br>正常积分即可</p></li><li><p>没有x，$y\prime\prime&#x3D;f(y,y\prime)$<br>令$p(y)&#x3D;y\prime,y\prime\prime&#x3D;\frac{dp}{dx}&#x3D;\frac{dp}{dy}\frac{dy}{dx}&#x3D;p\frac{dp}{dy}$,有<br>$$<br>p\frac{dp}{dy}&#x3D;f(y,p)<br>$$<br>正常积分即可</p></li></ul><h2 id="伯努利方程"><a href="#伯努利方程" class="headerlink" title="伯努利方程"></a>伯努利方程</h2><p>方程</p><p>$$<br>y^{(1)}+p(x)y&#x3D;q(x)y^{(n)}<br>$$</p><p>被称为伯努利方程，可以两边同时除以 $y^{(n)}$ 化为</p><p>$$<br>y^{1-n}\frac{dy}{dx}+p(x)y^{1-n}&#x3D;q(x)<br>$$</p><p>令 $z&#x3D;y^(1-n)$ 则有</p><p>$$<br>\frac{1}{1-n}\frac{dz}{dx}+p(x)z&#x3D;q(x)<br>$$</p><p>从而可以使用一阶线性微分方程求通解的方法得到z的表达式，然后再代回y即得到原微分方程的通解。</p><h2 id="全微分方程"><a href="#全微分方程" class="headerlink" title="全微分方程"></a>全微分方程</h2><p>对于</p><p>$$<br>du(x,y)&#x3D;P(x,y)dx+Q(x,y)dy<br>$$</p><p>称 $P(x,y)dx+Q(x,y)dy&#x3D;0$ 为全微分方程，通解为 $u(x,y)&#x3D;C$ 。</p><div class="note flat"><p>设D为平面上的一个单连通区域，P和Q在D上连续且有连续的一阶偏导数，则全微分方程成立的充要条件是<br>$$<br>\frac{\partial{P}}{\partial{y}}&#x3D;\frac{\partial{Q}}{\partial{x}}<br>$$</p></div><h3 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h3><ul><li>偏积分</li></ul><p>$$<br>du(x,y)&#x3D;P(x,y)dx+Q(x,y)dy<br>$$</p><p>如果P和Q不确定，可以通过充要条件，确定P和Q。<br>然后两边对x积分 ，可以得到<br>$$<br>u(x,y) &#x3D; \int{Pdx} + C(y)<br>$$<br>其中C(y)是在u对x求偏导的时候被当做了常数，这个时候 u对y求偏导就可以得到 Q，可以得出C(y)的表达式，然后代入到上面的u的表达式，即可得到u(x,y)&#x3D;0 这个解</p><ul><li>折线法</li></ul><p>$$<br>\because \int{du(x,y)}&#x3D;\int{P(x,y)dx+Q(x,y)dy}<br>$$<br>$$<br>\because \frac{\partial{P}}{\partial{y}}&#x3D;\frac{\partial{Q}}{\partial{x}}<br>$$<br>$$<br>\therefore 与路径无关，从(0,0)\rightarrow(x,0)\rightarrow(x,y)<br>$$<br>$$<br>\therefore \int_{(0,0)}^{(x,y)}{du(x,y)}&#x3D;\int{P(x,y)dx+Q(x,y)dy}<br>$$<br>$$<br>\int_{(0,0)}^{(x,y)}{du(x,y)}&#x3D;\int_{(0,0)}^{(x,0)}{P(x,y)dx}+{\int_{(x,0)}^{(x,y)}Q(x,y)dy}<br>$$</p><h2 id="欧拉方程"><a href="#欧拉方程" class="headerlink" title="欧拉方程"></a>欧拉方程</h2><p>$$<br>\frac{d^2y}{dx^2}+a_1x\frac{dy}{dx}+a_2y&#x3D;f(x)<br>$$<br>被称为欧拉方程。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>若 x&gt;0 ，可令 $x&#x3D;e^t$做变量代换，有$t&#x3D;lnx$,$\frac{dt}{dx}&#x3D;\frac{1}{x}$,$\frac{dy}{dx}&#x3D;\frac{dy}{dt}\frac{dt}{dx}&#x3D;\frac{1}{x}\frac{dy}{dt}$<br>$\frac{d^2y}{dx^2}&#x3D;-\frac{1}{x^2}\frac{dy}{dt}+\frac{1}{x^2}\frac{d^2y}{dt^2}$<br>$$<br>\frac{d^2y}{dt^2}+(a_1-1)\frac{dy}{dt}+a_2y&#x3D;f(e^t)<br>$$<br>是常系数微分方程的形式，解得y和t，然后换元回来即可。</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 微分方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年我使用Github搭建一个Hexo博客的事</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<mark class="hl-label orange">此教程正在更新</mark>  <mark class="hl-label orange">此教程正在更新</mark>  <mark class="hl-label orange">此教程正在更新</mark> <hr><p>欢迎来到关于 <mark class="hl-label green">搭建博客</mark>  的第一篇文章，这里初步介绍了如何使用 <mark class="hl-label blue">Hexo</mark>  来搭建博客。<br>关于更多的资讯，请访问 <a href="https://hexo.io/">Hexo</a> 和 <a href="https://butterfly.js.org/">Butterfly主题</a> 获取。</p><hr><h2 id="一个简单的尝试"><a href="#一个简单的尝试" class="headerlink" title="一个简单的尝试"></a>一个简单的尝试</h2><p>此教程面向有过简单了解 <mark class="hl-label green">JS</mark>  <mark class="hl-label green">YML</mark>  <mark class="hl-label green">GIT</mark>  <mark class="hl-label green">NODE</mark>  的人群。<br>如果你<mark class="hl-label red">不清楚以上知识，请提前在B站等相关网站了解好，避免后续操作出错</mark> </p><blockquote><p>环境准备：</p><ul><li>node</li><li>git</li></ul><mark class="hl-label red">以上为必需</mark> <ul><li>VSCode</li><li>虚拟专用网络</li></ul></blockquote><h3 id="首先需要使用NPM安装好Hexo命令行"><a href="#首先需要使用NPM安装好Hexo命令行" class="headerlink" title="首先需要使用NPM安装好Hexo命令行"></a>首先需要使用NPM安装好Hexo命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装Hexo</a></p><h3 id="先来试着创建一篇帖文"><a href="#先来试着创建一篇帖文" class="headerlink" title="先来试着创建一篇帖文"></a>先来试着创建一篇帖文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;我的博客&quot;</span></span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/docs/writing.html">写作相关</a></p><h3 id="启动你的服务器"><a href="#启动你的服务器" class="headerlink" title="启动你的服务器"></a>启动你的服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>此时，你就可以在 <mark class="hl-label green">本地</mark>  的4000端口查看你的博客了。</p><p>更多资讯: <a href="https://hexo.io/docs/server.html">服务相关</a></p><h3 id="生成静态网站文件，做好部署的准备"><a href="#生成静态网站文件，做好部署的准备" class="headerlink" title="生成静态网站文件，做好部署的准备"></a>生成静态网站文件，做好部署的准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/docs/generating.html">生成相关</a></p><h3 id="来吧，部署你的站点"><a href="#来吧，部署你的站点" class="headerlink" title="来吧，部署你的站点"></a>来吧，部署你的站点</h3><p>首先，需要在 <mark class="hl-label red">_config.yml</mark>  中 <mark class="hl-label red">仿照</mark>  以下内容添加、修改为：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/[username]/[username].github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>其次，需要打开你的Github，创建一个与你 <mark class="hl-label green">用户名</mark>  相同的 <mark class="hl-label green">公开仓库</mark>  – <mark class="hl-label green">用户名.github.io</mark> ，如图所示：<br><img src="/posts/4a17b156/Github1.png" alt="Github仓库样例"></p><p>接着在 <mark class="hl-label red">Git环境</mark>  中输入以下命令：</p><figure class="highlight bash"><figcaption><span>Git-bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;Git上配置的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><p>这个生成的密钥在 <mark class="hl-label green">C:Users你的用户名\.ssh</mark>  下的 <mark class="hl-label green">idrsa.pub</mark> </p><p>进入 <a href="https://github.com/settings/profile">Github设置</a> 找到 <mark class="hl-label green">SSH and GPG keys</mark> ，点击 <mark class="hl-label green">New SSH key</mark> ，将 <mark class="hl-label green">idrsa.pub</mark>  的内容复制粘贴进去即可。</p><p>然后 进入 <mark class="hl-label green">仓库</mark>  的设置，找到 <mark class="hl-label green">Actions</mark>  </p><p>点击下面的 <mark class="hl-label green">General</mark>  将 <mark class="hl-label green">Actions permissions</mark>  选择 <mark class="hl-label green">Allow all actions and reusable workflows</mark>  即可。<br><img src="/posts/4a17b156/Github2.png" alt="Github仓库设置"></p><p>最后最后，只要在命令行里输入下面的命令就可以完成在Github上部署一个简单的Hexo博客网站了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在此之前最好通过 hexo clean 和 hexo generate 清理和重新生成缓存</span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/docs/one-command-deployment.html">部署相关</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经过以上的操作，你已经学会了如何使用 <mark class="hl-label green">Git</mark>  加 <mark class="hl-label green">Node</mark>  搭建并部署<a href="https://lnpbqc.github.io/">一个基于Hexo的网站</a>了！<br>可以开始使用基于 <mark class="hl-label green">Markdown</mark>  的语法来写博客，将自己的感想、知识等分享给网友了。</p><h2 id="那么如何使用和本站一样的Butterfly主题"><a href="#那么如何使用和本站一样的Butterfly主题" class="headerlink" title="那么如何使用和本站一样的Butterfly主题"></a>那么如何使用和本站一样的Butterfly主题</h2><p>等待更新中…</p><a class="btn-beautify block center green outline larger" href="/"   title="点赞"><i class="far fa-hand-point-right"></i><span>点赞</span></a>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
