<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Fyne实现一个Markdown编辑器</title>
      <link href="/posts/efd5f3e1.html"/>
      <url>/posts/efd5f3e1.html</url>
      
        <content type="html"><![CDATA[<p>前面学习了如何用<mark class="hl-label green">Fyne</mark> 简单搭建一个GUI框架<br>而本网站的博客是使用Markdown进行创作的，理所当然的要写一个 <mark class="hl-label green">基于Fyne的Markdown编辑器</mark> </p><h2 id="程序框架搭建"><a href="#程序框架搭建" class="headerlink" title="程序框架搭建"></a>程序框架搭建</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/dialog&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/storage&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">Edit        *widget.Entry <span class="comment">// 输入区域</span></span><br><span class="line">Preview     *widget.RichText <span class="comment">// 渲染区域</span></span><br><span class="line">CurrentFile fyne.URI <span class="comment">// 文件URI，即文件路径</span></span><br><span class="line">MenuItem    *fyne.MenuItem <span class="comment">// Save菜单选项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cfg config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Markdown编辑器&quot;</span>)</span><br><span class="line"></span><br><span class="line">w.SetContent(container.NewHSplit(cfg.makeUI()))</span><br><span class="line">cfg.createMenu(w)</span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">w.CenterOnScreen()</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> makeUI() (*widget.Entry, *widget.RichText) &#123;</span><br><span class="line">edit := widget.NewMultiLineEntry()</span><br><span class="line">preview := widget.NewRichTextFromMarkdown(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit.OnChanged = preview.ParseMarkdown</span><br><span class="line"></span><br><span class="line">cfg.Edit = edit</span><br><span class="line">cfg.Preview = preview</span><br><span class="line"><span class="keyword">return</span> edit, preview</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> createMenu(win fyne.Window) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里，使用了一个自定义的config结构，里面存储了会用到的一些属性，如输入的文本，输出渲染完成的Markdown文本，已经保存文件路径等。</p><p>使用了<code>container.NewHSplit</code>新容器，它以垂直的分割线左右平分页面。</p><p>在<code>makeUI</code>中，将<code>Edit</code>和<code>Preview</code>等组件与cfg关联起来，而<code>edit.OnChanged = preview.ParseMarkdown</code>则是在编辑区发生变动的时候调用Markdown富文本渲染。</p><h2 id="创建菜单"><a href="#创建菜单" class="headerlink" title="创建菜单"></a>创建菜单</h2><p><img src="/posts/efd5f3e1/image.png" alt="VSC菜单样式"></p><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> createMenu(win fyne.Window) &#123;</span><br><span class="line">open := fyne.NewMenuItem(<span class="string">&quot;Open&quot;</span>, cfg.open(win))</span><br><span class="line">save := fyne.NewMenuItem(<span class="string">&quot;save&quot;</span>, cfg.save(win))</span><br><span class="line">cfg.MenuItem = save</span><br><span class="line">save.Disabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">saveAs := fyne.NewMenuItem(<span class="string">&quot;save as&quot;</span>, cfg.saveAsFunc(win))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜单，相当于VSV上面一行中的一项</span></span><br><span class="line">file := fyne.NewMenu(<span class="string">&quot;File&quot;</span>, open, save, saveAs)</span><br><span class="line">    <span class="comment">// 主菜单栏，相当于VSC上面那一行</span></span><br><span class="line">menu := fyne.NewMainMenu(file)</span><br><span class="line">win.SetMainMenu(menu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> save(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> open(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> saveAsFunc(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里将<mark class="hl-label green">save</mark>  赋值给cfg是为了保证 <mark class="hl-label green">没有打开文件和另存为文件前，用户无法进行保存操作，防止不可预知的错误出现</mark> 。</p><blockquote><p>后续会通过cfg来设置允许保存。</p></blockquote><p>通过回调函数分离实现功能。</p><h2 id="实现对应功能"><a href="#实现对应功能" class="headerlink" title="实现对应功能"></a>实现对应功能</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> save(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 注意此时已经有了保存路径，所以就不是调用 NewFileSave 了，而是通过URI来获取输出流并输出保存</span></span><br><span class="line">writer, err := storage.Writer(cfg.CurrentFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> writer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> writer.Close()</span><br><span class="line"></span><br><span class="line">writer.Write([]<span class="type">byte</span>(cfg.Edit.Text))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> open(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">openDialog := dialog.NewFileOpen(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIReadCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close()</span><br><span class="line"></span><br><span class="line">data, err := io.ReadAll(closer) <span class="comment">// 读取操作</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg.Edit.SetText(<span class="type">string</span>(data))<span class="comment">// 将数据放到编辑区</span></span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI()</span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())</span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span> <span class="comment">// 允许保存</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line"></span><br><span class="line">openDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> saveAsFunc(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">saveDialog := dialog.NewFileSave(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIWriteCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close() <span class="comment">// defer可以理解为在函数的结尾会自动调用后面的函数，IO要记得及时关闭</span></span><br><span class="line">closer.Write([]<span class="type">uint8</span>(cfg.Edit.Text))</span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI() <span class="comment">// 获取输出的URI</span></span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())<span class="comment">// 更新标题</span></span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span> <span class="comment">// 可以保存了</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line">saveDialog.SetFileName(<span class="string">&quot;未命名-&quot;</span> + time.DateOnly + <span class="string">&quot;.md&quot;</span>)</span><br><span class="line">saveDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，基础的<mark class="hl-label green">Markdown编辑器</mark> 的功能就完成了。</p><h2 id="但是打开的文件不只有Markdown怎么办呢"><a href="#但是打开的文件不只有Markdown怎么办呢" class="headerlink" title="但是打开的文件不只有Markdown怎么办呢"></a>但是打开的文件不只有Markdown怎么办呢</h2><p>为解决这个问题，可以使用<code>storage.NewExtensionFileFilter</code>来过滤掉不需要的文件。</p><figure class="highlight diff"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var cfg config</span><br><span class="line"><span class="addition">+ var filter = storage.NewExtensionFileFilter([]string&#123;&quot;.md&quot;, &quot;.MD&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">func (cfg *config) open(win fyne.Window) func() &#123;</span><br><span class="line">return func() &#123;</span><br><span class="line">...</span><br><span class="line"><span class="addition">+openDialog.SetFilter(filter)</span></span><br><span class="line"></span><br><span class="line">openDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cfg *config) saveAsFunc(win fyne.Window) func() &#123;</span><br><span class="line">return func() &#123;</span><br><span class="line">...</span><br><span class="line"><span class="addition">+saveDialog.SetFilter(filter)</span></span><br><span class="line"></span><br><span class="line">saveDialog.SetFileName(&quot;未命名-&quot; + time.DateOnly + &quot;.md&quot;)</span><br><span class="line">saveDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="虽然目前已经大体上完成，但还是有一些Bug"><a href="#虽然目前已经大体上完成，但还是有一些Bug" class="headerlink" title="虽然目前已经大体上完成，但还是有一些Bug"></a>虽然目前已经大体上完成，但还是有一些Bug</h2><ul><li>可能保存的文件类型错误（缺省文件类型）</li><li>都在一个文件夹内太过臃肿</li></ul><h3 id="对保存文件的类型进行检查"><a href="#对保存文件的类型进行检查" class="headerlink" title="对保存文件的类型进行检查"></a>对保存文件的类型进行检查</h3><p>在saveAsFunc的方法内部添加一下语句：</p><figure class="highlight diff"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">defer closer.Close()</span><br><span class="line"></span><br><span class="line"><span class="addition">+if !strings.HasSuffix(strings.ToLower(closer.URI().String()), &quot;.md&quot;) &#123;</span></span><br><span class="line"><span class="addition">+    dialog.ShowInformation(&quot;文件类型错误&quot;, &quot;必须是 .md 或 .MD&quot;, win)</span></span><br><span class="line"><span class="addition">+    return</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line">closer.Write([]uint8(cfg.Edit.Text))</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分开存放在不同的文件下，便于管理"><a href="#分开存放在不同的文件下，便于管理" class="headerlink" title="分开存放在不同的文件下，便于管理"></a>分开存放在不同的文件下，便于管理</h3><p>此次实操，我就将其分为</p><ul><li>main.go</li><li>ui.go</li><li>config.go</li></ul><div class="note green flat"><p>注意，Golang虽然没有<strong>public,protected,private</strong>这样的修饰符，但能够通过更改首字母的大小写来更改<strong>可见性</strong>。<br>若首字母是大写字母，则表示可以被其他包通过 <strong>import</strong> 来访问，相当于公开；而小写字母的话，则表示在本包内使用，相当于私有。<br>因此，在本节内容的分开存放源代码并不影响其变量和struct等的可见性，直接复制粘贴即可。因为他们都在 <code>package main</code>下面。</p></div><h2 id="最后的源码"><a href="#最后的源码" class="headerlink" title="最后的源码"></a>最后的源码</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/storage&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">Edit        *widget.Entry</span><br><span class="line">Preview     *widget.RichText</span><br><span class="line">CurrentFile fyne.URI</span><br><span class="line">MenuItem    *fyne.MenuItem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cfg config</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter = storage.NewExtensionFileFilter([]<span class="type">string</span>&#123;<span class="string">&quot;.md&quot;</span>, <span class="string">&quot;.MD&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Markdown编辑器&quot;</span>)</span><br><span class="line"></span><br><span class="line">w.SetContent(container.NewHSplit(cfg.makeUI()))</span><br><span class="line">cfg.createMenu(w)</span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">w.CenterOnScreen()</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight golang"><figcaption><span>ui.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> makeUI() (*widget.Entry, *widget.RichText) &#123;</span><br><span class="line">edit := widget.NewMultiLineEntry()</span><br><span class="line">preview := widget.NewRichTextFromMarkdown(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit.OnChanged = preview.ParseMarkdown</span><br><span class="line"></span><br><span class="line">cfg.Edit = edit</span><br><span class="line">cfg.Preview = preview</span><br><span class="line"><span class="keyword">return</span> edit, preview</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> createMenu(win fyne.Window) &#123;</span><br><span class="line">open := fyne.NewMenuItem(<span class="string">&quot;Open&quot;</span>, cfg.open(win))</span><br><span class="line">save := fyne.NewMenuItem(<span class="string">&quot;save&quot;</span>, cfg.save(win))</span><br><span class="line">cfg.MenuItem = save</span><br><span class="line">save.Disabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">saveAs := fyne.NewMenuItem(<span class="string">&quot;save as&quot;</span>, cfg.saveAsFunc(win))</span><br><span class="line"></span><br><span class="line">file := fyne.NewMenu(<span class="string">&quot;File&quot;</span>, open, save, saveAs)</span><br><span class="line"></span><br><span class="line">menu := fyne.NewMainMenu(file)</span><br><span class="line">win.SetMainMenu(menu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight golang"><figcaption><span>config.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/dialog&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/storage&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> save(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">writer, err := storage.Writer(cfg.CurrentFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> writer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> writer.Close()</span><br><span class="line"></span><br><span class="line">writer.Write([]<span class="type">byte</span>(cfg.Edit.Text))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> open(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">openDialog := dialog.NewFileOpen(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIReadCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close()</span><br><span class="line"></span><br><span class="line">data, err := io.ReadAll(closer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg.Edit.SetText(<span class="type">string</span>(data))</span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI()</span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())</span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line">openDialog.SetFilter(filter)</span><br><span class="line"></span><br><span class="line">openDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cfg *config)</span></span> saveAsFunc(win fyne.Window) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">saveDialog := dialog.NewFileSave(<span class="function"><span class="keyword">func</span><span class="params">(closer fyne.URIWriteCloser, err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">dialog.ShowError(err, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> closer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> closer.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(strings.ToLower(closer.URI().String()), <span class="string">&quot;.md&quot;</span>) &#123;</span><br><span class="line">dialog.ShowInformation(<span class="string">&quot;文件类型错误&quot;</span>, <span class="string">&quot;必须是 .md 或 .MD&quot;</span>, win)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closer.Write([]<span class="type">uint8</span>(cfg.Edit.Text))</span><br><span class="line"></span><br><span class="line">cfg.CurrentFile = closer.URI()</span><br><span class="line"></span><br><span class="line">win.SetTitle(<span class="string">&quot;Markdown编辑器-&quot;</span> + closer.URI().Name())</span><br><span class="line"></span><br><span class="line">cfg.MenuItem.Disabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;, win)</span><br><span class="line"></span><br><span class="line">saveDialog.SetFilter(filter)</span><br><span class="line"></span><br><span class="line">saveDialog.SetFileName(<span class="string">&quot;未命名-&quot;</span> + time.DateOnly + <span class="string">&quot;.md&quot;</span>)</span><br><span class="line">saveDialog.Show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>接下来使用下面的命令进行打包即可随时随地使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fyne package -os windows -icon lnpbqc.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Fyne框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Fyne </tag>
            
            <tag> Markdown编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Go的FyneGUI框架</title>
      <link href="/posts/755f3e3d.html"/>
      <url>/posts/755f3e3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="初体验Go的GUI框架"><a href="#初体验Go的GUI框架" class="headerlink" title="初体验Go的GUI框架"></a>初体验Go的GUI框架</h2><h3 id="首先安装好Go和mingw编译器并配置完成"><a href="#首先安装好Go和mingw编译器并配置完成" class="headerlink" title="首先安装好Go和mingw编译器并配置完成"></a>首先安装好Go和mingw编译器并配置完成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">$ g++ -v</span><br></pre></td></tr></table></figure><h3 id="安装Fyne框架"><a href="#安装Fyne框架" class="headerlink" title="安装Fyne框架"></a>安装Fyne框架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go mod init <span class="built_in">test</span></span><br><span class="line">$ go get fyne.io/fyne/v2</span><br></pre></td></tr></table></figure><h3 id="编写HelloWorld"><a href="#编写HelloWorld" class="headerlink" title="编写HelloWorld"></a>编写HelloWorld</h3><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Go gogo&quot;</span>)</span><br><span class="line">hello := widget.NewLabel(<span class="string">&quot;Hello Fyne!&quot;</span>)</span><br><span class="line">w.SetContent(container.NewVBox(</span><br><span class="line">hello,</span><br><span class="line">widget.NewButton(<span class="string">&quot;Hi!&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">hello.SetText(<span class="string">&quot;Welcome :)&quot;</span>)</span><br><span class="line">&#125;),</span><br><span class="line">))</span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">400</span>, <span class="number">200</span>))</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go mod tidy <span class="comment"># 清理 go.mod 文件，移除不需要的依赖，确保使用的依赖在文件中声明</span></span><br><span class="line">$ go run . <span class="comment"># 表示运行所有 package main 的 go文件</span></span><br></pre></td></tr></table></figure><div class="note flat"><p>第一次编译可能需要时间较长</p></div><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/posts/755f3e3d/image.png" alt="运行结果"></p><h2 id="初体验的后进阶测试"><a href="#初体验的后进阶测试" class="headerlink" title="初体验的后进阶测试"></a>初体验的后进阶测试</h2><div class="note green flat"><p>那么如何去实现日常使用程序中的点击按钮打开新窗口的操作呢？</p></div><p>如果你不是小白的话，通过上述例子已经能举一反三自己完成了。</p><p>注意到 <code>widget.NewButton(&quot;Hi!&quot;, func() &#123;             hello.SetText(&quot;Welcome :)&quot;)         &#125;),</code> 这个元素内的内容，里面定义了一个回调函数，因此我们可以在这里去实现相关操作。</p><figure class="highlight diff"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">w.SetContent(container.NewVBox(</span><br><span class="line">    hello,</span><br><span class="line">    widget.NewButton(&quot;Hi!&quot;, func() &#123;</span><br><span class="line"><span class="deletion">-       hello.SetText(&quot;Welcome :)&quot;)</span></span><br><span class="line"><span class="addition">+       wt := a.NewWindow(&quot;新窗口&quot;)</span></span><br><span class="line"><span class="addition">+       wt.SetContent(widget.NewLabel(&quot;这是新窗口的内容&quot;))</span></span><br><span class="line"><span class="addition">+       wt.Show()</span></span><br><span class="line">    &#125;),</span><br><span class="line">))</span><br></pre></td></tr></table></figure><div class="note flat"><p>如果出现中文乱码，可以通过更改字体样式来解决。</p></div><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/posts/755f3e3d/image2.png" alt="点击按钮后效果"></p><h2 id="进一步使用Fyne框架进行交互操作"><a href="#进一步使用Fyne框架进行交互操作" class="headerlink" title="进一步使用Fyne框架进行交互操作"></a>进一步使用Fyne框架进行交互操作</h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/app&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/container&quot;</span></span><br><span class="line"><span class="string">&quot;fyne.io/fyne/v2/widget&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := app.New()</span><br><span class="line">w := a.NewWindow(<span class="string">&quot;Go gogo&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里使用一个函数将UI抽离出逻辑流，接收返回的组件指针</span></span><br><span class="line">w.SetContent(container.NewVBox(makeUI()))</span><br><span class="line"></span><br><span class="line">w.Resize(fyne.NewSize(<span class="number">400</span>, <span class="number">200</span>))</span><br><span class="line">w.ShowAndRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeUI</span><span class="params">()</span></span> (*widget.Label, *widget.Entry, *widget.Button, *widget.Label, *widget.Button) &#123;</span><br><span class="line">    <span class="comment">// 这个实现的是将输入框的内容显示在标签上</span></span><br><span class="line">output := widget.NewLabel(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">entry := widget.NewEntry()</span><br><span class="line">btn := widget.NewButton(<span class="string">&quot;Click&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">output.SetText(entry.Text)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是实现点击增加数字</span></span><br><span class="line">number := <span class="number">0</span></span><br><span class="line">count := widget.NewLabel(fmt.Sprintf(<span class="string">&quot;Current Number: %d&quot;</span>, number))</span><br><span class="line">incrementBtn := widget.NewButton(<span class="string">&quot;Add&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">number++</span><br><span class="line">count.SetText(fmt.Sprintf(<span class="string">&quot;Current Number: %d&quot;</span>, number))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> output, entry, btn, count, incrementBtn</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note flat"><p><code>container.NewVBox</code> 接收组件和其指针，并将组件垂直的渲染出来</p></div><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="/posts/755f3e3d/image3.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Fyne框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Fyne </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于在Butterfly自定义样式的猜想</title>
      <link href="/posts/16f2d8ad.html"/>
      <url>/posts/16f2d8ad.html</url>
      
        <content type="html"><![CDATA[<div class="note flat"><p>虽然有着Butterfly这样很好看的主题，但是对于我这样的喜欢<del>没事找事</del>的人来说，肯定要来一点点自己的设置，允许自己来<del><mark class="hl-label green">破坏</mark> Butterfly的一致性</del>。</p></div><h2 id="想法起源"><a href="#想法起源" class="headerlink" title="想法起源"></a>想法起源</h2><p>每次打开<mark class="hl-label blue">VSC</mark> 都是 <code>hexo n page</code> 或者 <code>hexo n post</code><br>基于程序员的自我折腾性，我想既然给了page这样新建不同路径的命令，那么就不可能就依靠 <mark class="hl-label green">page</mark>  这一个样式来强迫统一所有的UI。<br>那么，一定存在着某个方法，可以让我在Butterfly的主题下进行自己的<del>创造</del>乱改。</p><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p><strong>注意到</strong>，在博客源文件的根目录下的 <mark class="hl-label default">source</mark> 文件夹存在 <mark class="hl-label default">_posts</mark> 文件，我们写的md文档都会存在这里面。</p><p>由此想到，会不会在 <mark class="hl-label default">themes</mark> 这个管理主题下面会有管理样式的相关文件。</p><p><img src="/posts/16f2d8ad/image.png" alt="主题目录"></p><p><del>以过了六级的英语</del> 易知，<mark class="hl-label default">layout</mark>  文件夹下面存放的就是相关的布局文件。</p><p>打开文件夹就可以看见诸如 <mark class="hl-label default">archive</mark> ，<mark class="hl-label default">page</mark> ，<mark class="hl-label default">post</mark> 等眼熟的单词，直觉中打开 <mark class="hl-label default">page.pug</mark> 后，有以下文件内容</p><figure class="highlight js"><figcaption><span>page.pug</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extends</span> includes/layout.<span class="property">pug</span></span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  #page</span><br><span class="line">    <span class="keyword">if</span> top_img === <span class="literal">false</span></span><br><span class="line">      h1.<span class="property">page</span>-title= page.<span class="property">title</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> page.<span class="property">type</span></span><br><span class="line">      when <span class="string">&#x27;tags&#x27;</span></span><br><span class="line">        include includes/page/tags.<span class="property">pug</span></span><br><span class="line">      when <span class="string">&#x27;link&#x27;</span></span><br><span class="line">        include includes/page/flink.<span class="property">pug</span></span><br><span class="line">      when <span class="string">&#x27;categories&#x27;</span></span><br><span class="line">        include includes/page/categories.<span class="property">pug</span></span><br><span class="line">      <span class="keyword">default</span></span><br><span class="line">        include includes/page/<span class="keyword">default</span>-page.<span class="property">pug</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> page.<span class="property">comments</span> !== <span class="literal">false</span> &amp;&amp; theme.<span class="property">comments</span> &amp;&amp; theme.<span class="property">comments</span>.<span class="property">use</span></span><br><span class="line">      - <span class="keyword">var</span> commentsJsLoad = <span class="literal">true</span></span><br><span class="line">      !=<span class="title function_">partial</span>(<span class="string">&#x27;includes/third-party/comments/index&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到一些在初步配置 Butterfly 的眼熟的结构。<mark class="hl-label green">page.type</mark>  似乎获得的就是 在 <a href="/tags/">标签</a> 和 <a href="/categories/">分类</a> 中配置的 <mark class="hl-label green">type</mark> </p><p>所以我可以在后面添加一行属于我的 <mark class="hl-label green">type</mark> </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case page.type</span><br><span class="line">    when &#x27;tags&#x27;</span><br><span class="line">        include includes/page/tags.pug</span><br><span class="line">    when &#x27;link&#x27;</span><br><span class="line">        include includes/page/flink.pug</span><br><span class="line">    when &#x27;categories&#x27;</span><br><span class="line">        include includes/page/categories.pug</span><br><span class="line"><span class="addition">+    when &#x27;lnpbqc&#x27;</span></span><br><span class="line"><span class="addition">+        include includes/page/lnpbqc.pug</span></span><br><span class="line">    default</span><br><span class="line">        include includes/page/default-page.pug</span><br></pre></td></tr></table></figure><p>由此就在 <code>hexo n page</code>后在 <mark class="hl-label green">Page Front-matter</mark>  中指定 <mark class="hl-label green">type</mark> 为 <mark class="hl-label default">lnpbqc</mark> 即可。</p><p>这样，所有关于 type 是lnpbqc 的页面样式就是自定义的了。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>至于如何写样式，则需要通过 <a href="https://butterfly.js.org/posts/ceeb73f/?highlight=inject#Inject">CSS和JS注入</a> + <a href="https://www.pugjs.cn/language/attributes">Pugjs</a> 来完成。</p><p>本文的目的到此结束，剩下的就需要你自己去学习、去实践、去创造了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程如何解题呢？</title>
      <link href="/posts/2f28f7d1.html"/>
      <url>/posts/2f28f7d1.html</url>
      
        <content type="html"><![CDATA[<p><strong>微分方程是什么？什么是微分方程？怎么解微分方程啊！！！！！！！</strong><br><del><em>我不会我好菜</em></del></p><h2 id="一阶微分方程"><a href="#一阶微分方程" class="headerlink" title="一阶微分方程"></a>一阶微分方程</h2><p>对于</p><p>$$<br>F(x,y,y^{(1)},y^{(2)},…,y^{(n)},)&#x3D;0<br>$$</p><p>这样方程，称之为<strong>n阶微分方程</strong>，其中$y^{(n)}$是必需的。</p><p>当n&#x3D;1时，上述方程称为<strong>一阶微分方程</strong></p><ul><li>通解：含有n个独立的任意常数的函数</li><li>特解：不含任意常数的函数</li></ul><h3 id="变量可分离"><a href="#变量可分离" class="headerlink" title="变量可分离"></a>变量可分离</h3><p>对于y和x部分可以完全分离的，可以写成这样的形式：</p><p>$$<br>\frac{dy}{g(y)}&#x3D;h(x)dx<br>$$</p><p>两边积分，有通解</p><p>$$<br>\int{\frac{dy}{g(y)}}&#x3D;\int{h(x)dx}+C<br>$$</p><h3 id="齐次微分方程"><a href="#齐次微分方程" class="headerlink" title="齐次微分方程"></a>齐次微分方程</h3><p>若有形式</p><p>$$<br>\frac{dy}{dx}&#x3D;f(x,y)<br>$$<br>则可以令</p><p>$$<br>u&#x3D;\frac{y}{x}，即y&#x3D;ux①<br>$$</p><p>同时，两边对x求导，则有</p><p>$$<br>dy&#x3D;dux+dxu，即dy&#x3D;dux+u②<br>$$</p><p>将①②代入到原方程</p><p>$$<br>dux+u &#x3D; g(u)<br>$$</p><p>分离变量，积分可得</p><p>$$<br>\int{\frac{du}{g(u)-u}}&#x3D;\int{\frac{dx}{x}}+C&#x3D;\ln({|x|})+C<br>$$</p><h2 id="一阶线性微分方程"><a href="#一阶线性微分方程" class="headerlink" title="一阶线性微分方程"></a>一阶线性微分方程</h2><p>对于一阶线性微分方程</p><p>$$<br>y^{(1)}+p(x)y&#x3D;q(x)<br>$$</p><p>其通解为</p><p>$$<br>y&#x3D;e^{-\int{p(x)dx}}[\int{q(x)e^{\int{p(x)dx}}dx}+C]<br>$$</p><h2 id="二阶常系数齐次微分方程"><a href="#二阶常系数齐次微分方程" class="headerlink" title="二阶常系数齐次微分方程"></a>二阶常系数齐次微分方程</h2><p>对于<br>$$<br>y\prime\prime+py\prime+qy&#x3D;0<br>$$<br>其中p、q都是常数<br>通过构造特征方程<br>$$<br>r^2+pr+q&#x3D;0<br>$$<br>对于r的根和方程的解有以下对应关系</p><table><thead><tr><th>r根的关系</th><th>方程的解</th></tr></thead><tbody><tr><td>不相等实根 $r_1 \neq r_2$</td><td>$y&#x3D;C_1e^{r_1x}+C_2e^{r_2x}$</td></tr><tr><td>相等实根 $r_1 = r_2$</td><td>$y&#x3D;C_1e^{r_1x}+C_2xe^{r_2x}$</td></tr><tr><td>共轭复根 $r&#x3D;\alpha \pm \beta i$</td><td>$y&#x3D;C_1e^{\alpha x}cos(\beta x)+C_2e^{\alpha x}sin(\beta x)$</td></tr></tbody></table><div class="note flat"><p>可以推广到更高阶，见<strong>2025考研数学·复习全书·基础篇 P208</strong></p></div><h2 id="二阶常系数非齐次微分方程"><a href="#二阶常系数非齐次微分方程" class="headerlink" title="二阶常系数非齐次微分方程"></a>二阶常系数非齐次微分方程</h2><ul><li>首先求出其齐次形式的通解</li><li>再求非齐次的特解(化成非齐次的标准形式)</li></ul><h3 id="类型1-y-prime-prime-py-prime-qy-P-m-x-e-ax"><a href="#类型1-y-prime-prime-py-prime-qy-P-m-x-e-ax" class="headerlink" title="类型1 $y\prime\prime+py\prime+qy&#x3D;P_m(x)e^{ax}$"></a>类型1 $y\prime\prime+py\prime+qy&#x3D;P_m(x)e^{ax}$</h3><p>特解为</p><p>$$<br>y^*(x)&#x3D;e^{ax}R_m(x)x^k<br>$$<br>其中R(x)为m次多项式（系数待定），k为特征方程和a的<strong>相同个数</strong>(0,1,2)</p><h3 id="类型2-y-prime-prime-py-prime-qy-e-ax-P-m-x-cos-bx-Q-m-x-sin-bx"><a href="#类型2-y-prime-prime-py-prime-qy-e-ax-P-m-x-cos-bx-Q-m-x-sin-bx" class="headerlink" title="类型2 $y\prime\prime+py\prime+qy&#x3D;e^{ax}(P_m(x)cos(bx)+Q_m(x)sin(bx))$"></a>类型2 $y\prime\prime+py\prime+qy&#x3D;e^{ax}(P_m(x)cos(bx)+Q_m(x)sin(bx))$</h3><p>特解为</p><p>$$<br>y^*(x)&#x3D;e^{ax}{R_m(x)cos(bx)+S_m(x)sin(bx)}x^k<br>$$<br>其中R(x),S(x)为m次多项式（系数待定），k为特征方程$\alpha \pm \beta i$的 和 $a + bi$ <strong>相同个数</strong>(0,1)</p><h3 id="可降阶方程"><a href="#可降阶方程" class="headerlink" title="可降阶方程"></a>可降阶方程</h3><ul><li><p>没有y和$y\prime$，直接两次积分即可</p></li><li><p>没有y，$y\prime\prime&#x3D;f(x,y\prime)$<br>令$p(x)&#x3D;y\prime,y\prime\prime&#x3D;\frac{dp}{dx}$,有<br>$$<br>\frac{dp}{dx}&#x3D;f(x,p)<br>$$<br>正常积分即可</p></li><li><p>没有x，$y\prime\prime&#x3D;f(y,y\prime)$<br>令$p(y)&#x3D;y\prime,y\prime\prime&#x3D;\frac{dp}{dx}&#x3D;\frac{dp}{dy}\frac{dy}{dx}&#x3D;p\frac{dp}{dy}$,有<br>$$<br>p\frac{dp}{dy}&#x3D;f(y,p)<br>$$<br>正常积分即可</p></li></ul><h2 id="伯努利方程"><a href="#伯努利方程" class="headerlink" title="伯努利方程"></a>伯努利方程</h2><p>方程</p><p>$$<br>y^{(1)}+p(x)y&#x3D;q(x)y^{(n)}<br>$$</p><p>被称为伯努利方程，可以两边同时除以 $y^{(n)}$ 化为</p><p>$$<br>y^{1-n}\frac{dy}{dx}+p(x)y^{1-n}&#x3D;q(x)<br>$$</p><p>令 $z&#x3D;y^(1-n)$ 则有</p><p>$$<br>\frac{1}{1-n}\frac{dz}{dx}+p(x)z&#x3D;q(x)<br>$$</p><p>从而可以使用一阶线性微分方程求通解的方法得到z的表达式，然后再代回y即得到原微分方程的通解。</p><h2 id="全微分方程"><a href="#全微分方程" class="headerlink" title="全微分方程"></a>全微分方程</h2><p>对于</p><p>$$<br>du(x,y)&#x3D;P(x,y)dx+Q(x,y)dy<br>$$</p><p>称 $P(x,y)dx+Q(x,y)dy&#x3D;0$ 为全微分方程，通解为 $u(x,y)&#x3D;C$ 。</p><div class="note flat"><p>设D为平面上的一个单连通区域，P和Q在D上连续且有连续的一阶偏导数，则全微分方程成立的充要条件是<br>$$<br>\frac{\partial{P}}{\partial{y}}&#x3D;\frac{\partial{Q}}{\partial{x}}<br>$$</p></div><h3 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h3><ul><li>偏积分</li></ul><p>$$<br>du(x,y)&#x3D;P(x,y)dx+Q(x,y)dy<br>$$</p><p>如果P和Q不确定，可以通过充要条件，确定P和Q。<br>然后两边对x积分 ，可以得到<br>$$<br>u(x,y) &#x3D; \int{Pdx} + C(y)<br>$$<br>其中C(y)是在u对x求偏导的时候被当做了常数，这个时候 u对y求偏导就可以得到 Q，可以得出C(y)的表达式，然后代入到上面的u的表达式，即可得到u(x,y)&#x3D;0 这个解</p><ul><li>折线法</li></ul><p>$$<br>\because \int{du(x,y)}&#x3D;\int{P(x,y)dx+Q(x,y)dy}<br>$$<br>$$<br>\because \frac{\partial{P}}{\partial{y}}&#x3D;\frac{\partial{Q}}{\partial{x}}<br>$$<br>$$<br>\therefore 与路径无关，从(0,0)\rightarrow(x,0)\rightarrow(x,y)<br>$$<br>$$<br>\therefore \int_{(0,0)}^{(x,y)}{du(x,y)}&#x3D;\int{P(x,y)dx+Q(x,y)dy}<br>$$<br>$$<br>\int_{(0,0)}^{(x,y)}{du(x,y)}&#x3D;\int_{(0,0)}^{(x,0)}{P(x,y)dx}+{\int_{(x,0)}^{(x,y)}Q(x,y)dy}<br>$$</p><h2 id="欧拉方程"><a href="#欧拉方程" class="headerlink" title="欧拉方程"></a>欧拉方程</h2><p>$$<br>\frac{d^2y}{dx^2}+a_1x\frac{dy}{dx}+a_2y&#x3D;f(x)<br>$$<br>被称为欧拉方程。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>若 x&gt;0 ，可令 $x&#x3D;e^t$做变量代换，有$t&#x3D;lnx$,$\frac{dt}{dx}&#x3D;\frac{1}{x}$,$\frac{dy}{dx}&#x3D;\frac{dy}{dt}\frac{dt}{dx}&#x3D;\frac{1}{x}\frac{dy}{dt}$<br>$\frac{d^2y}{dx^2}&#x3D;-\frac{1}{x^2}\frac{dy}{dt}+\frac{1}{x^2}\frac{d^2y}{dt^2}$<br>$$<br>\frac{d^2y}{dt^2}+(a_1-1)\frac{dy}{dt}+a_2y&#x3D;f(e^t)<br>$$<br>是常系数微分方程的形式，解得y和t，然后换元回来即可。</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 微分方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年我使用Github搭建一个Hexo博客的事</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<mark class="hl-label orange">此教程正在更新</mark>  <mark class="hl-label orange">此教程正在更新</mark>  <mark class="hl-label orange">此教程正在更新</mark> <hr><p>欢迎来到关于 <mark class="hl-label green">搭建博客</mark>  的第一篇文章，这里初步介绍了如何使用 <mark class="hl-label blue">Hexo</mark>  来搭建博客。<br>关于更多的资讯，请访问 <a href="https://hexo.io/">Hexo</a> 和 <a href="https://butterfly.js.org/">Butterfly主题</a> 获取。</p><hr><h2 id="一个简单的尝试"><a href="#一个简单的尝试" class="headerlink" title="一个简单的尝试"></a>一个简单的尝试</h2><p>此教程面向有过简单了解 <mark class="hl-label green">JS</mark>  <mark class="hl-label green">YML</mark>  <mark class="hl-label green">GIT</mark>  <mark class="hl-label green">NODE</mark>  的人群。<br>如果你<mark class="hl-label red">不清楚以上知识，请提前在B站等相关网站了解好，避免后续操作出错</mark> </p><blockquote><p>环境准备：</p><ul><li>node</li><li>git</li></ul><mark class="hl-label red">以上为必需</mark> <ul><li>VSCode</li><li>虚拟专用网络</li></ul></blockquote><h3 id="首先需要使用NPM安装好Hexo命令行"><a href="#首先需要使用NPM安装好Hexo命令行" class="headerlink" title="首先需要使用NPM安装好Hexo命令行"></a>首先需要使用NPM安装好Hexo命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装Hexo</a></p><h3 id="先来试着创建一篇帖文"><a href="#先来试着创建一篇帖文" class="headerlink" title="先来试着创建一篇帖文"></a>先来试着创建一篇帖文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;我的博客&quot;</span></span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/docs/writing.html">写作相关</a></p><h3 id="启动你的服务器"><a href="#启动你的服务器" class="headerlink" title="启动你的服务器"></a>启动你的服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>此时，你就可以在 <mark class="hl-label green">本地</mark>  的4000端口查看你的博客了。</p><p>更多资讯: <a href="https://hexo.io/docs/server.html">服务相关</a></p><h3 id="生成静态网站文件，做好部署的准备"><a href="#生成静态网站文件，做好部署的准备" class="headerlink" title="生成静态网站文件，做好部署的准备"></a>生成静态网站文件，做好部署的准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/docs/generating.html">生成相关</a></p><h3 id="来吧，部署你的站点"><a href="#来吧，部署你的站点" class="headerlink" title="来吧，部署你的站点"></a>来吧，部署你的站点</h3><p>首先，需要在 <mark class="hl-label red">_config.yml</mark>  中 <mark class="hl-label red">仿照</mark>  以下内容添加、修改为：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/[username]/[username].github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>其次，需要打开你的Github，创建一个与你 <mark class="hl-label green">用户名</mark>  相同的 <mark class="hl-label green">公开仓库</mark>  – <mark class="hl-label green">用户名.github.io</mark> ，如图所示：<br><img src="/posts/4a17b156/Github1.png" alt="Github仓库样例"></p><p>接着在 <mark class="hl-label red">Git环境</mark>  中输入以下命令：</p><figure class="highlight bash"><figcaption><span>Git-bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;Git上配置的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><p>这个生成的密钥在 <mark class="hl-label green">C:Users你的用户名\.ssh</mark>  下的 <mark class="hl-label green">idrsa.pub</mark> </p><p>进入 <a href="https://github.com/settings/profile">Github设置</a> 找到 <mark class="hl-label green">SSH and GPG keys</mark> ，点击 <mark class="hl-label green">New SSH key</mark> ，将 <mark class="hl-label green">idrsa.pub</mark>  的内容复制粘贴进去即可。</p><p>然后 进入 <mark class="hl-label green">仓库</mark>  的设置，找到 <mark class="hl-label green">Actions</mark>  </p><p>点击下面的 <mark class="hl-label green">General</mark>  将 <mark class="hl-label green">Actions permissions</mark>  选择 <mark class="hl-label green">Allow all actions and reusable workflows</mark>  即可。<br><img src="/posts/4a17b156/Github2.png" alt="Github仓库设置"></p><p>最后最后，只要在命令行里输入下面的命令就可以完成在Github上部署一个简单的Hexo博客网站了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在此之前最好通过 hexo clean 和 hexo generate 清理和重新生成缓存</span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多资讯: <a href="https://hexo.io/docs/one-command-deployment.html">部署相关</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经过以上的操作，你已经学会了如何使用 <mark class="hl-label green">Git</mark>  加 <mark class="hl-label green">Node</mark>  搭建并部署<a href="https://lnpbqc.github.io/">一个基于Hexo的网站</a>了！<br>可以开始使用基于 <mark class="hl-label green">Markdown</mark>  的语法来写博客，将自己的感想、知识等分享给网友了。</p><h2 id="那么如何使用和本站一样的Butterfly主题"><a href="#那么如何使用和本站一样的Butterfly主题" class="headerlink" title="那么如何使用和本站一样的Butterfly主题"></a>那么如何使用和本站一样的Butterfly主题</h2><p>等待更新中…</p><a class="btn-beautify block center green outline larger" href="/"   title="点赞"><i class="far fa-hand-point-right"></i><span>点赞</span></a>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
